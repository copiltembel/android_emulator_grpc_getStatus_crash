// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emulator_controller.proto

#include "emulator_controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFormat_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entry_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntryList_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageFormat_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageTransport_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogcatEntry_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParameterValue_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rotation_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Touch_emulator_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_emulator_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VmConfiguration_emulator_5fcontroller_2eproto;
namespace android {
namespace emulation {
namespace control {
class VmRunStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VmRunState> _instance;
} _VmRunState_default_instance_;
class ParameterValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParameterValue> _instance;
} _ParameterValue_default_instance_;
class PhysicalModelValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhysicalModelValue> _instance;
} _PhysicalModelValue_default_instance_;
class SensorValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorValue> _instance;
} _SensorValue_default_instance_;
class LogMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMessage> _instance;
} _LogMessage_default_instance_;
class LogcatEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogcatEntry> _instance;
} _LogcatEntry_default_instance_;
class VmConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VmConfiguration> _instance;
} _VmConfiguration_default_instance_;
class ClipDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClipData> _instance;
} _ClipData_default_instance_;
class TouchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Touch> _instance;
} _Touch_default_instance_;
class TouchEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TouchEvent> _instance;
} _TouchEvent_default_instance_;
class MouseEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MouseEvent> _instance;
} _MouseEvent_default_instance_;
class KeyboardEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyboardEvent> _instance;
} _KeyboardEvent_default_instance_;
class FingerprintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint> _instance;
} _Fingerprint_default_instance_;
class GpsStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpsState> _instance;
} _GpsState_default_instance_;
class BatteryStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryState> _instance;
} _BatteryState_default_instance_;
class ImageTransportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageTransport> _instance;
} _ImageTransport_default_instance_;
class ImageFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageFormat> _instance;
} _ImageFormat_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class RotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rotation> _instance;
} _Rotation_default_instance_;
class PhoneCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhoneCall> _instance;
} _PhoneCall_default_instance_;
class PhoneResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhoneResponse> _instance;
} _PhoneResponse_default_instance_;
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class EntryListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntryList> _instance;
} _EntryList_default_instance_;
class EmulatorStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmulatorStatus> _instance;
} _EmulatorStatus_default_instance_;
class AudioFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioFormat> _instance;
} _AudioFormat_default_instance_;
class AudioPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioPacket> _instance;
} _AudioPacket_default_instance_;
class SmsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmsMessage> _instance;
} _SmsMessage_default_instance_;
}  // namespace control
}  // namespace emulation
}  // namespace android
static void InitDefaultsscc_info_AudioFormat_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_AudioFormat_default_instance_;
    new (ptr) ::android::emulation::control::AudioFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::AudioFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFormat_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioFormat_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_AudioPacket_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_AudioPacket_default_instance_;
    new (ptr) ::android::emulation::control::AudioPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::AudioPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioPacket_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AudioPacket_emulator_5fcontroller_2eproto}, {
      &scc_info_AudioFormat_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_BatteryState_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_BatteryState_default_instance_;
    new (ptr) ::android::emulation::control::BatteryState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::BatteryState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatteryState_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatteryState_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_ClipData_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_ClipData_default_instance_;
    new (ptr) ::android::emulation::control::ClipData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::ClipData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClipData_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClipData_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_EmulatorStatus_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_EmulatorStatus_default_instance_;
    new (ptr) ::android::emulation::control::EmulatorStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::EmulatorStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EmulatorStatus_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EmulatorStatus_emulator_5fcontroller_2eproto}, {
      &scc_info_VmConfiguration_emulator_5fcontroller_2eproto.base,
      &scc_info_EntryList_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_Entry_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_Entry_default_instance_;
    new (ptr) ::android::emulation::control::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entry_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Entry_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_EntryList_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_EntryList_default_instance_;
    new (ptr) ::android::emulation::control::EntryList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::EntryList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntryList_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EntryList_emulator_5fcontroller_2eproto}, {
      &scc_info_Entry_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_Fingerprint_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_Fingerprint_default_instance_;
    new (ptr) ::android::emulation::control::Fingerprint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::Fingerprint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fingerprint_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fingerprint_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_GpsState_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_GpsState_default_instance_;
    new (ptr) ::android::emulation::control::GpsState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::GpsState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpsState_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpsState_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_Image_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_Image_default_instance_;
    new (ptr) ::android::emulation::control::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Image_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Image_emulator_5fcontroller_2eproto}, {
      &scc_info_ImageFormat_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_ImageFormat_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_ImageFormat_default_instance_;
    new (ptr) ::android::emulation::control::ImageFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::ImageFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageFormat_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ImageFormat_emulator_5fcontroller_2eproto}, {
      &scc_info_Rotation_emulator_5fcontroller_2eproto.base,
      &scc_info_ImageTransport_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_ImageTransport_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_ImageTransport_default_instance_;
    new (ptr) ::android::emulation::control::ImageTransport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::ImageTransport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageTransport_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageTransport_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_KeyboardEvent_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_KeyboardEvent_default_instance_;
    new (ptr) ::android::emulation::control::KeyboardEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::KeyboardEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyboardEvent_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyboardEvent_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_LogMessage_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_LogMessage_default_instance_;
    new (ptr) ::android::emulation::control::LogMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::LogMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogMessage_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogMessage_emulator_5fcontroller_2eproto}, {
      &scc_info_LogcatEntry_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_LogcatEntry_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_LogcatEntry_default_instance_;
    new (ptr) ::android::emulation::control::LogcatEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::LogcatEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogcatEntry_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogcatEntry_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_MouseEvent_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_MouseEvent_default_instance_;
    new (ptr) ::android::emulation::control::MouseEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::MouseEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseEvent_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MouseEvent_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_ParameterValue_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_ParameterValue_default_instance_;
    new (ptr) ::android::emulation::control::ParameterValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::ParameterValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParameterValue_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParameterValue_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_PhoneCall_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_PhoneCall_default_instance_;
    new (ptr) ::android::emulation::control::PhoneCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::PhoneCall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneCall_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhoneCall_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_PhoneResponse_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_PhoneResponse_default_instance_;
    new (ptr) ::android::emulation::control::PhoneResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::PhoneResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneResponse_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhoneResponse_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_PhysicalModelValue_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_PhysicalModelValue_default_instance_;
    new (ptr) ::android::emulation::control::PhysicalModelValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::PhysicalModelValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PhysicalModelValue_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PhysicalModelValue_emulator_5fcontroller_2eproto}, {
      &scc_info_ParameterValue_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_Rotation_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_Rotation_default_instance_;
    new (ptr) ::android::emulation::control::Rotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::Rotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rotation_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rotation_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_SensorValue_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_SensorValue_default_instance_;
    new (ptr) ::android::emulation::control::SensorValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::SensorValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorValue_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SensorValue_emulator_5fcontroller_2eproto}, {
      &scc_info_ParameterValue_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_SmsMessage_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_SmsMessage_default_instance_;
    new (ptr) ::android::emulation::control::SmsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::SmsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmsMessage_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SmsMessage_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_Touch_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_Touch_default_instance_;
    new (ptr) ::android::emulation::control::Touch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::Touch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Touch_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Touch_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_TouchEvent_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_TouchEvent_default_instance_;
    new (ptr) ::android::emulation::control::TouchEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::TouchEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TouchEvent_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TouchEvent_emulator_5fcontroller_2eproto}, {
      &scc_info_Touch_emulator_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_VmConfiguration_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_VmConfiguration_default_instance_;
    new (ptr) ::android::emulation::control::VmConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::VmConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VmConfiguration_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VmConfiguration_emulator_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_VmRunState_emulator_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::emulation::control::_VmRunState_default_instance_;
    new (ptr) ::android::emulation::control::VmRunState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::emulation::control::VmRunState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VmRunState_emulator_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VmRunState_emulator_5fcontroller_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_emulator_5fcontroller_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_emulator_5fcontroller_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_emulator_5fcontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_emulator_5fcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::VmRunState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::VmRunState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ParameterValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ParameterValue, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhysicalModelValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhysicalModelValue, target_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhysicalModelValue, status_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhysicalModelValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::SensorValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::SensorValue, target_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::SensorValue, status_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::SensorValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogMessage, contents_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogMessage, start_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogMessage, next_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogMessage, sort_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogMessage, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogcatEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogcatEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogcatEntry, pid_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogcatEntry, tid_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogcatEntry, level_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogcatEntry, tag_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::LogcatEntry, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::VmConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::VmConfiguration, hypervisortype_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::VmConfiguration, numberofcpucores_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::VmConfiguration, ramsizebytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ClipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ClipData, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Touch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Touch, x_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Touch, y_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Touch, identifier_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Touch, pressure_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Touch, touch_major_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Touch, touch_minor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::TouchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::TouchEvent, touches_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::TouchEvent, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::MouseEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::MouseEvent, x_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::MouseEvent, y_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::MouseEvent, buttons_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::MouseEvent, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::KeyboardEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::KeyboardEvent, codetype_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::KeyboardEvent, eventtype_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::KeyboardEvent, keycode_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::KeyboardEvent, key_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::KeyboardEvent, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Fingerprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Fingerprint, istouching_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Fingerprint, touchid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::GpsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::GpsState, passiveupdate_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::GpsState, latitude_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::GpsState, longitude_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::GpsState, speed_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::GpsState, bearing_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::GpsState, altitude_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::GpsState, satellites_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::BatteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::BatteryState, hasbattery_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::BatteryState, ispresent_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::BatteryState, charger_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::BatteryState, chargelevel_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::BatteryState, health_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::BatteryState, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageTransport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageTransport, channel_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageTransport, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageFormat, format_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageFormat, rotation_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageFormat, width_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageFormat, height_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageFormat, display_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::ImageFormat, transport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Image, format_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Image, width_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Image, height_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Image, image_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Image, seq_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Image, timestampus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Rotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Rotation, rotation_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Rotation, xaxis_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Rotation, yaxis_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Rotation, zaxis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhoneCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhoneCall, operation_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhoneCall, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhoneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::PhoneResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Entry, key_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::EntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::EntryList, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::EmulatorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::EmulatorStatus, version_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::EmulatorStatus, uptime_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::EmulatorStatus, booted_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::EmulatorStatus, vmconfig_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::EmulatorStatus, hardwareconfig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::AudioFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::AudioFormat, samplingrate_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::AudioFormat, channels_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::AudioFormat, format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::AudioPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::AudioPacket, format_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::AudioPacket, timestamp_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::AudioPacket, audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::SmsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::SmsMessage, srcaddress_),
  PROTOBUF_FIELD_OFFSET(::android::emulation::control::SmsMessage, text_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::android::emulation::control::VmRunState)},
  { 6, -1, sizeof(::android::emulation::control::ParameterValue)},
  { 12, -1, sizeof(::android::emulation::control::PhysicalModelValue)},
  { 20, -1, sizeof(::android::emulation::control::SensorValue)},
  { 28, -1, sizeof(::android::emulation::control::LogMessage)},
  { 38, -1, sizeof(::android::emulation::control::LogcatEntry)},
  { 49, -1, sizeof(::android::emulation::control::VmConfiguration)},
  { 57, -1, sizeof(::android::emulation::control::ClipData)},
  { 63, -1, sizeof(::android::emulation::control::Touch)},
  { 74, -1, sizeof(::android::emulation::control::TouchEvent)},
  { 81, -1, sizeof(::android::emulation::control::MouseEvent)},
  { 90, -1, sizeof(::android::emulation::control::KeyboardEvent)},
  { 100, -1, sizeof(::android::emulation::control::Fingerprint)},
  { 107, -1, sizeof(::android::emulation::control::GpsState)},
  { 119, -1, sizeof(::android::emulation::control::BatteryState)},
  { 130, -1, sizeof(::android::emulation::control::ImageTransport)},
  { 137, -1, sizeof(::android::emulation::control::ImageFormat)},
  { 148, -1, sizeof(::android::emulation::control::Image)},
  { 159, -1, sizeof(::android::emulation::control::Rotation)},
  { 168, -1, sizeof(::android::emulation::control::PhoneCall)},
  { 175, -1, sizeof(::android::emulation::control::PhoneResponse)},
  { 181, -1, sizeof(::android::emulation::control::Entry)},
  { 188, -1, sizeof(::android::emulation::control::EntryList)},
  { 194, -1, sizeof(::android::emulation::control::EmulatorStatus)},
  { 204, -1, sizeof(::android::emulation::control::AudioFormat)},
  { 212, -1, sizeof(::android::emulation::control::AudioPacket)},
  { 220, -1, sizeof(::android::emulation::control::SmsMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_VmRunState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_ParameterValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_PhysicalModelValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_SensorValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_LogMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_LogcatEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_VmConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_ClipData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_Touch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_TouchEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_MouseEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_KeyboardEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_Fingerprint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_GpsState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_BatteryState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_ImageTransport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_ImageFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_Rotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_PhoneCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_PhoneResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_EntryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_EmulatorStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_AudioFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_AudioPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::emulation::control::_SmsMessage_default_instance_),
};

const char descriptor_table_protodef_emulator_5fcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031emulator_controller.proto\022\031android.emu"
  "lation.control\032\033google/protobuf/empty.pr"
  "oto\"\327\001\n\nVmRunState\022=\n\005state\030\001 \001(\0162..andr"
  "oid.emulation.control.VmRunState.RunStat"
  "e\"\211\001\n\010RunState\022\013\n\007UNKNOWN\020\000\022\013\n\007RUNNING\020\001"
  "\022\016\n\nRESTORE_VM\020\002\022\n\n\006PAUSED\020\003\022\013\n\007SAVE_VM\020"
  "\004\022\014\n\010SHUTDOWN\020\005\022\r\n\tTERMINATE\020\007\022\t\n\005RESET\020"
  "\t\022\022\n\016INTERNAL_ERROR\020\n\"\"\n\016ParameterValue\022"
  "\020\n\004data\030\001 \003(\002B\002\020\001\"\340\003\n\022PhysicalModelValue"
  "\022J\n\006target\030\001 \001(\0162:.android.emulation.con"
  "trol.PhysicalModelValue.PhysicalType\022C\n\006"
  "status\030\002 \001(\01623.android.emulation.control"
  ".PhysicalModelValue.State\0228\n\005value\030\003 \001(\013"
  "2).android.emulation.control.ParameterVa"
  "lue\"U\n\005State\022\006\n\002OK\020\000\022\027\n\nNO_SERVICE\020\375\377\377\377\377"
  "\377\377\377\377\001\022\025\n\010DISABLED\020\376\377\377\377\377\377\377\377\377\001\022\024\n\007UNKNOWN\020"
  "\377\377\377\377\377\377\377\377\377\001\"\247\001\n\014PhysicalType\022\014\n\010POSITION\020"
  "\000\022\014\n\010ROTATION\020\001\022\022\n\016MAGNETIC_FIELD\020\002\022\017\n\013T"
  "EMPERATURE\020\003\022\r\n\tPROXIMITY\020\004\022\t\n\005LIGHT\020\005\022\014"
  "\n\010PRESSURE\020\006\022\014\n\010HUMIDITY\020\007\022\014\n\010VELOCITY\020\010"
  "\022\022\n\016AMBIENT_MOTION\020\t\"\370\003\n\013SensorValue\022A\n\006"
  "target\030\001 \001(\01621.android.emulation.control"
  ".SensorValue.SensorType\022<\n\006status\030\002 \001(\0162"
  ",.android.emulation.control.SensorValue."
  "State\0228\n\005value\030\003 \001(\0132).android.emulation"
  ".control.ParameterValue\"U\n\005State\022\006\n\002OK\020\000"
  "\022\027\n\nNO_SERVICE\020\375\377\377\377\377\377\377\377\377\001\022\025\n\010DISABLED\020\376\377"
  "\377\377\377\377\377\377\377\001\022\024\n\007UNKNOWN\020\377\377\377\377\377\377\377\377\377\001\"\326\001\n\nSenso"
  "rType\022\020\n\014ACCELERATION\020\000\022\r\n\tGYROSCOPE\020\001\022\022"
  "\n\016MAGNETIC_FIELD\020\002\022\017\n\013ORIENTATION\020\003\022\017\n\013T"
  "EMPERATURE\020\004\022\r\n\tPROXIMITY\020\005\022\t\n\005LIGHT\020\006\022\014"
  "\n\010PRESSURE\020\007\022\014\n\010HUMIDITY\020\010\022\037\n\033MAGNETIC_F"
  "IELD_UNCALIBRATED\020\t\022\032\n\026GYROSCOPE_UNCALIB"
  "RATED\020\n\"\322\001\n\nLogMessage\022\020\n\010contents\030\001 \001(\t"
  "\022\r\n\005start\030\002 \001(\003\022\014\n\004next\030\003 \001(\003\022;\n\004sort\030\004 "
  "\001(\0162-.android.emulation.control.LogMessa"
  "ge.LogType\0227\n\007entries\030\005 \003(\0132&.android.em"
  "ulation.control.LogcatEntry\"\037\n\007LogType\022\010"
  "\n\004Text\020\000\022\n\n\006Parsed\020\001\"\206\002\n\013LogcatEntry\022\021\n\t"
  "timestamp\030\001 \001(\004\022\013\n\003pid\030\002 \001(\r\022\013\n\003tid\030\003 \001("
  "\r\022>\n\005level\030\004 \001(\0162/.android.emulation.con"
  "trol.LogcatEntry.LogLevel\022\013\n\003tag\030\005 \001(\t\022\013"
  "\n\003msg\030\006 \001(\t\"p\n\010LogLevel\022\013\n\007UNKNOWN\020\000\022\013\n\007"
  "DEFAULT\020\001\022\013\n\007VERBOSE\020\002\022\t\n\005DEBUG\020\003\022\010\n\004INF"
  "O\020\004\022\010\n\004WARN\020\005\022\007\n\003ERR\020\006\022\t\n\005FATAL\020\007\022\n\n\006SIL"
  "ENT\020\010\"\360\001\n\017VmConfiguration\022S\n\016hypervisorT"
  "ype\030\001 \001(\0162;.android.emulation.control.Vm"
  "Configuration.VmHypervisorType\022\030\n\020number"
  "OfCpuCores\030\002 \001(\005\022\024\n\014ramSizeBytes\030\003 \001(\003\"X"
  "\n\020VmHypervisorType\022\013\n\007UNKNOWN\020\000\022\010\n\004NONE\020"
  "\001\022\007\n\003KVM\020\002\022\010\n\004HAXM\020\003\022\007\n\003HVF\020\004\022\010\n\004WHPX\020\005\022"
  "\007\n\003GVM\020\006\"\030\n\010ClipData\022\014\n\004text\030\001 \001(\t\"m\n\005To"
  "uch\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\022\n\nidentifier\030"
  "\003 \001(\005\022\020\n\010pressure\030\004 \001(\005\022\023\n\013touch_major\030\005"
  " \001(\005\022\023\n\013touch_minor\030\006 \001(\005\"O\n\nTouchEvent\022"
  "1\n\007touches\030\001 \003(\0132 .android.emulation.con"
  "trol.Touch\022\016\n\006device\030\002 \001(\005\"C\n\nMouseEvent"
  "\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\017\n\007buttons\030\003 \001(\005\022"
  "\016\n\006device\030\004 \001(\005\"\301\002\n\rKeyboardEvent\022F\n\010cod"
  "eType\030\001 \001(\01624.android.emulation.control."
  "KeyboardEvent.KeyCodeType\022H\n\teventType\030\002"
  " \001(\01625.android.emulation.control.Keyboar"
  "dEvent.KeyEventType\022\017\n\007keyCode\030\003 \001(\005\022\013\n\003"
  "key\030\004 \001(\t\022\014\n\004text\030\005 \001(\t\"<\n\013KeyCodeType\022\007"
  "\n\003Usb\020\000\022\t\n\005Evdev\020\001\022\007\n\003XKB\020\002\022\007\n\003Win\020\003\022\007\n\003"
  "Mac\020\004\"4\n\014KeyEventType\022\013\n\007keydown\020\000\022\t\n\005ke"
  "yup\020\001\022\014\n\010keypress\020\002\"2\n\013Fingerprint\022\022\n\nis"
  "Touching\030\001 \001(\010\022\017\n\007touchId\030\002 \001(\005\"\214\001\n\010GpsS"
  "tate\022\025\n\rpassiveUpdate\030\001 \001(\010\022\020\n\010latitude\030"
  "\002 \001(\001\022\021\n\tlongitude\030\003 \001(\001\022\r\n\005speed\030\004 \001(\001\022"
  "\017\n\007bearing\030\005 \001(\001\022\020\n\010altitude\030\006 \001(\001\022\022\n\nsa"
  "tellites\030\007 \001(\005\"\207\004\n\014BatteryState\022\022\n\nhasBa"
  "ttery\030\001 \001(\010\022\021\n\tisPresent\030\002 \001(\010\022G\n\007charge"
  "r\030\003 \001(\01626.android.emulation.control.Batt"
  "eryState.BatteryCharger\022\023\n\013chargeLevel\030\004"
  " \001(\005\022E\n\006health\030\005 \001(\01625.android.emulation"
  ".control.BatteryState.BatteryHealth\022E\n\006s"
  "tatus\030\006 \001(\01625.android.emulation.control."
  "BatteryState.BatteryStatus\"W\n\rBatterySta"
  "tus\022\013\n\007UNKNOWN\020\000\022\014\n\010CHARGING\020\001\022\017\n\013DISCHA"
  "RGING\020\002\022\020\n\014NOT_CHARGING\020\003\022\010\n\004FULL\020\004\"9\n\016B"
  "atteryCharger\022\010\n\004NONE\020\000\022\006\n\002AC\020\001\022\007\n\003USB\020\002"
  "\022\014\n\010WIRELESS\020\003\"P\n\rBatteryHealth\022\010\n\004GOOD\020"
  "\000\022\n\n\006FAILED\020\001\022\010\n\004DEAD\020\002\022\017\n\013OVERVOLTAGE\020\003"
  "\022\016\n\nOVERHEATED\020\004\"\256\001\n\016ImageTransport\022K\n\007c"
  "hannel\030\001 \001(\0162:.android.emulation.control"
  ".ImageTransport.TransportChannel\022\016\n\006hand"
  "le\030\002 \001(\t\"\?\n\020TransportChannel\022!\n\035TRANSPOR"
  "T_CHANNEL_UNSPECIFIED\020\000\022\010\n\004MMAP\020\001\"\244\002\n\013Im"
  "ageFormat\022@\n\006format\030\001 \001(\01620.android.emul"
  "ation.control.ImageFormat.ImgFormat\0225\n\010r"
  "otation\030\002 \001(\0132#.android.emulation.contro"
  "l.Rotation\022\r\n\005width\030\003 \001(\r\022\016\n\006height\030\004 \001("
  "\r\022\017\n\007display\030\005 \001(\r\022<\n\ttransport\030\006 \001(\0132)."
  "android.emulation.control.ImageTransport"
  "\".\n\tImgFormat\022\007\n\003PNG\020\000\022\014\n\010RGBA8888\020\001\022\n\n\006"
  "RGB888\020\002\"\227\001\n\005Image\0226\n\006format\030\001 \001(\0132&.and"
  "roid.emulation.control.ImageFormat\022\021\n\005wi"
  "dth\030\002 \001(\rB\002\030\001\022\022\n\006height\030\003 \001(\rB\002\030\001\022\r\n\005ima"
  "ge\030\004 \001(\014\022\013\n\003seq\030\005 \001(\r\022\023\n\013timestampUs\030\006 \001"
  "(\004\"\325\001\n\010Rotation\022B\n\010rotation\030\001 \001(\01620.andr"
  "oid.emulation.control.Rotation.SkinRotat"
  "ion\022\r\n\005xAxis\030\002 \001(\001\022\r\n\005yAxis\030\003 \001(\001\022\r\n\005zAx"
  "is\030\004 \001(\001\"X\n\014SkinRotation\022\014\n\010PORTRAIT\020\000\022\r"
  "\n\tLANDSCAPE\020\001\022\024\n\020REVERSE_PORTRAIT\020\002\022\025\n\021R"
  "EVERSE_LANDSCAPE\020\003\"\364\001\n\tPhoneCall\022A\n\toper"
  "ation\030\001 \001(\0162..android.emulation.control."
  "PhoneCall.Operation\022\016\n\006number\030\002 \001(\t\"\223\001\n\t"
  "Operation\022\014\n\010InitCall\020\000\022\016\n\nAcceptCall\020\001\022"
  "\026\n\022RejectCallExplicit\020\002\022\022\n\016RejectCallBus"
  "y\020\003\022\022\n\016DisconnectCall\020\004\022\023\n\017PlaceCallOnHo"
  "ld\020\005\022\023\n\017TakeCallOffHold\020\006\"\274\001\n\rPhoneRespo"
  "nse\022C\n\010response\030\001 \001(\01621.android.emulatio"
  "n.control.PhoneResponse.Response\"f\n\010Resp"
  "onse\022\006\n\002OK\020\000\022\020\n\014BadOperation\020\001\022\r\n\tBadNum"
  "ber\020\002\022\021\n\rInvalidAction\020\003\022\020\n\014ActionFailed"
  "\020\004\022\014\n\010RadioOff\020\005\"#\n\005Entry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t\"<\n\tEntryList\022/\n\005entry\030\001 \003("
  "\0132 .android.emulation.control.Entry\"\275\001\n\016"
  "EmulatorStatus\022\017\n\007version\030\001 \001(\t\022\016\n\006uptim"
  "e\030\002 \001(\004\022\016\n\006booted\030\003 \001(\010\022<\n\010vmConfig\030\004 \001("
  "\0132*.android.emulation.control.VmConfigur"
  "ation\022<\n\016hardwareConfig\030\005 \001(\0132$.android."
  "emulation.control.EntryList\"\376\001\n\013AudioFor"
  "mat\022\024\n\014samplingRate\030\001 \001(\004\022A\n\010channels\030\002 "
  "\001(\0162/.android.emulation.control.AudioFor"
  "mat.Channels\022C\n\006format\030\003 \001(\01623.android.e"
  "mulation.control.AudioFormat.SampleForma"
  "t\"/\n\014SampleFormat\022\016\n\nAUD_FMT_U8\020\000\022\017\n\013AUD"
  "_FMT_S16\020\001\" \n\010Channels\022\010\n\004Mono\020\000\022\n\n\006Ster"
  "eo\020\001\"g\n\013AudioPacket\0226\n\006format\030\001 \001(\0132&.an"
  "droid.emulation.control.AudioFormat\022\021\n\tt"
  "imestamp\030\002 \001(\004\022\r\n\005audio\030\003 \001(\014\".\n\nSmsMess"
  "age\022\022\n\nsrcAddress\030\001 \001(\t\022\014\n\004text\030\002 \001(\t2\344\022"
  "\n\022EmulatorController\022b\n\014streamSensor\022&.a"
  "ndroid.emulation.control.SensorValue\032&.a"
  "ndroid.emulation.control.SensorValue\"\0000\001"
  "\022]\n\tgetSensor\022&.android.emulation.contro"
  "l.SensorValue\032&.android.emulation.contro"
  "l.SensorValue\"\000\022M\n\tsetSensor\022&.android.e"
  "mulation.control.SensorValue\032\026.google.pr"
  "otobuf.Empty\"\000\022[\n\020setPhysicalModel\022-.and"
  "roid.emulation.control.PhysicalModelValu"
  "e\032\026.google.protobuf.Empty\"\000\022r\n\020getPhysic"
  "alModel\022-.android.emulation.control.Phys"
  "icalModelValue\032-.android.emulation.contr"
  "ol.PhysicalModelValue\"\000\022w\n\023streamPhysica"
  "lModel\022-.android.emulation.control.Physi"
  "calModelValue\032-.android.emulation.contro"
  "l.PhysicalModelValue\"\0000\001\022M\n\014setClipboard"
  "\022#.android.emulation.control.ClipData\032\026."
  "google.protobuf.Empty\"\000\022M\n\014getClipboard\022"
  "\026.google.protobuf.Empty\032#.android.emulat"
  "ion.control.ClipData\"\000\022R\n\017streamClipboar"
  "d\022\026.google.protobuf.Empty\032#.android.emul"
  "ation.control.ClipData\"\0000\001\022O\n\nsetBattery"
  "\022\'.android.emulation.control.BatteryStat"
  "e\032\026.google.protobuf.Empty\"\000\022O\n\ngetBatter"
  "y\022\026.google.protobuf.Empty\032\'.android.emul"
  "ation.control.BatteryState\"\000\022G\n\006setGps\022#"
  ".android.emulation.control.GpsState\032\026.go"
  "ogle.protobuf.Empty\"\000\022G\n\006getGps\022\026.google"
  ".protobuf.Empty\032#.android.emulation.cont"
  "rol.GpsState\"\000\022S\n\017sendFingerprint\022&.andr"
  "oid.emulation.control.Fingerprint\032\026.goog"
  "le.protobuf.Empty\"\000\022M\n\007sendKey\022(.android"
  ".emulation.control.KeyboardEvent\032\026.googl"
  "e.protobuf.Empty\"\000\022L\n\tsendTouch\022%.androi"
  "d.emulation.control.TouchEvent\032\026.google."
  "protobuf.Empty\"\000\022L\n\tsendMouse\022%.android."
  "emulation.control.MouseEvent\032\026.google.pr"
  "otobuf.Empty\"\000\022]\n\tsendPhone\022$.android.em"
  "ulation.control.PhoneCall\032(.android.emul"
  "ation.control.PhoneResponse\"\000\022\\\n\007sendSms"
  "\022%.android.emulation.control.SmsMessage\032"
  "(.android.emulation.control.PhoneRespons"
  "e\"\000\022P\n\tgetStatus\022\026.google.protobuf.Empty"
  "\032).android.emulation.control.EmulatorSta"
  "tus\"\000\022[\n\rgetScreenshot\022&.android.emulati"
  "on.control.ImageFormat\032 .android.emulati"
  "on.control.Image\"\000\022`\n\020streamScreenshot\022&"
  ".android.emulation.control.ImageFormat\032 "
  ".android.emulation.control.Image\"\0000\001\022a\n\013"
  "streamAudio\022&.android.emulation.control."
  "AudioFormat\032&.android.emulation.control."
  "AudioPacket\"\0000\001\022[\n\tgetLogcat\022%.android.e"
  "mulation.control.LogMessage\032%.android.em"
  "ulation.control.LogMessage\"\000\022`\n\014streamLo"
  "gcat\022%.android.emulation.control.LogMess"
  "age\032%.android.emulation.control.LogMessa"
  "ge\"\0000\001\022M\n\nsetVmState\022%.android.emulation"
  ".control.VmRunState\032\026.google.protobuf.Em"
  "pty\"\000\022M\n\ngetVmState\022\026.google.protobuf.Em"
  "pty\032%.android.emulation.control.VmRunSta"
  "te\"\000B&\n\034com.android.emulator.controlP\001\242\002"
  "\003AECb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_emulator_5fcontroller_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_emulator_5fcontroller_2eproto_sccs[27] = {
  &scc_info_AudioFormat_emulator_5fcontroller_2eproto.base,
  &scc_info_AudioPacket_emulator_5fcontroller_2eproto.base,
  &scc_info_BatteryState_emulator_5fcontroller_2eproto.base,
  &scc_info_ClipData_emulator_5fcontroller_2eproto.base,
  &scc_info_EmulatorStatus_emulator_5fcontroller_2eproto.base,
  &scc_info_Entry_emulator_5fcontroller_2eproto.base,
  &scc_info_EntryList_emulator_5fcontroller_2eproto.base,
  &scc_info_Fingerprint_emulator_5fcontroller_2eproto.base,
  &scc_info_GpsState_emulator_5fcontroller_2eproto.base,
  &scc_info_Image_emulator_5fcontroller_2eproto.base,
  &scc_info_ImageFormat_emulator_5fcontroller_2eproto.base,
  &scc_info_ImageTransport_emulator_5fcontroller_2eproto.base,
  &scc_info_KeyboardEvent_emulator_5fcontroller_2eproto.base,
  &scc_info_LogMessage_emulator_5fcontroller_2eproto.base,
  &scc_info_LogcatEntry_emulator_5fcontroller_2eproto.base,
  &scc_info_MouseEvent_emulator_5fcontroller_2eproto.base,
  &scc_info_ParameterValue_emulator_5fcontroller_2eproto.base,
  &scc_info_PhoneCall_emulator_5fcontroller_2eproto.base,
  &scc_info_PhoneResponse_emulator_5fcontroller_2eproto.base,
  &scc_info_PhysicalModelValue_emulator_5fcontroller_2eproto.base,
  &scc_info_Rotation_emulator_5fcontroller_2eproto.base,
  &scc_info_SensorValue_emulator_5fcontroller_2eproto.base,
  &scc_info_SmsMessage_emulator_5fcontroller_2eproto.base,
  &scc_info_Touch_emulator_5fcontroller_2eproto.base,
  &scc_info_TouchEvent_emulator_5fcontroller_2eproto.base,
  &scc_info_VmConfiguration_emulator_5fcontroller_2eproto.base,
  &scc_info_VmRunState_emulator_5fcontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_emulator_5fcontroller_2eproto_once;
static bool descriptor_table_emulator_5fcontroller_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_emulator_5fcontroller_2eproto = {
  &descriptor_table_emulator_5fcontroller_2eproto_initialized, descriptor_table_protodef_emulator_5fcontroller_2eproto, "emulator_controller.proto", 7812,
  &descriptor_table_emulator_5fcontroller_2eproto_once, descriptor_table_emulator_5fcontroller_2eproto_sccs, descriptor_table_emulator_5fcontroller_2eproto_deps, 27, 1,
  schemas, file_default_instances, TableStruct_emulator_5fcontroller_2eproto::offsets,
  file_level_metadata_emulator_5fcontroller_2eproto, 27, file_level_enum_descriptors_emulator_5fcontroller_2eproto, file_level_service_descriptors_emulator_5fcontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_emulator_5fcontroller_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_emulator_5fcontroller_2eproto), true);
namespace android {
namespace emulation {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VmRunState_RunState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[0];
}
bool VmRunState_RunState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VmRunState_RunState VmRunState::UNKNOWN;
constexpr VmRunState_RunState VmRunState::RUNNING;
constexpr VmRunState_RunState VmRunState::RESTORE_VM;
constexpr VmRunState_RunState VmRunState::PAUSED;
constexpr VmRunState_RunState VmRunState::SAVE_VM;
constexpr VmRunState_RunState VmRunState::SHUTDOWN;
constexpr VmRunState_RunState VmRunState::TERMINATE;
constexpr VmRunState_RunState VmRunState::RESET;
constexpr VmRunState_RunState VmRunState::INTERNAL_ERROR;
constexpr VmRunState_RunState VmRunState::RunState_MIN;
constexpr VmRunState_RunState VmRunState::RunState_MAX;
constexpr int VmRunState::RunState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhysicalModelValue_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[1];
}
bool PhysicalModelValue_State_IsValid(int value) {
  switch (value) {
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PhysicalModelValue_State PhysicalModelValue::OK;
constexpr PhysicalModelValue_State PhysicalModelValue::NO_SERVICE;
constexpr PhysicalModelValue_State PhysicalModelValue::DISABLED;
constexpr PhysicalModelValue_State PhysicalModelValue::UNKNOWN;
constexpr PhysicalModelValue_State PhysicalModelValue::State_MIN;
constexpr PhysicalModelValue_State PhysicalModelValue::State_MAX;
constexpr int PhysicalModelValue::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhysicalModelValue_PhysicalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[2];
}
bool PhysicalModelValue_PhysicalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::POSITION;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::ROTATION;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::MAGNETIC_FIELD;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::TEMPERATURE;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::PROXIMITY;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::LIGHT;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::PRESSURE;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::HUMIDITY;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::VELOCITY;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::AMBIENT_MOTION;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::PhysicalType_MIN;
constexpr PhysicalModelValue_PhysicalType PhysicalModelValue::PhysicalType_MAX;
constexpr int PhysicalModelValue::PhysicalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorValue_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[3];
}
bool SensorValue_State_IsValid(int value) {
  switch (value) {
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorValue_State SensorValue::OK;
constexpr SensorValue_State SensorValue::NO_SERVICE;
constexpr SensorValue_State SensorValue::DISABLED;
constexpr SensorValue_State SensorValue::UNKNOWN;
constexpr SensorValue_State SensorValue::State_MIN;
constexpr SensorValue_State SensorValue::State_MAX;
constexpr int SensorValue::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorValue_SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[4];
}
bool SensorValue_SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorValue_SensorType SensorValue::ACCELERATION;
constexpr SensorValue_SensorType SensorValue::GYROSCOPE;
constexpr SensorValue_SensorType SensorValue::MAGNETIC_FIELD;
constexpr SensorValue_SensorType SensorValue::ORIENTATION;
constexpr SensorValue_SensorType SensorValue::TEMPERATURE;
constexpr SensorValue_SensorType SensorValue::PROXIMITY;
constexpr SensorValue_SensorType SensorValue::LIGHT;
constexpr SensorValue_SensorType SensorValue::PRESSURE;
constexpr SensorValue_SensorType SensorValue::HUMIDITY;
constexpr SensorValue_SensorType SensorValue::MAGNETIC_FIELD_UNCALIBRATED;
constexpr SensorValue_SensorType SensorValue::GYROSCOPE_UNCALIBRATED;
constexpr SensorValue_SensorType SensorValue::SensorType_MIN;
constexpr SensorValue_SensorType SensorValue::SensorType_MAX;
constexpr int SensorValue::SensorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogMessage_LogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[5];
}
bool LogMessage_LogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogMessage_LogType LogMessage::Text;
constexpr LogMessage_LogType LogMessage::Parsed;
constexpr LogMessage_LogType LogMessage::LogType_MIN;
constexpr LogMessage_LogType LogMessage::LogType_MAX;
constexpr int LogMessage::LogType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogcatEntry_LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[6];
}
bool LogcatEntry_LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogcatEntry_LogLevel LogcatEntry::UNKNOWN;
constexpr LogcatEntry_LogLevel LogcatEntry::DEFAULT;
constexpr LogcatEntry_LogLevel LogcatEntry::VERBOSE;
constexpr LogcatEntry_LogLevel LogcatEntry::DEBUG;
constexpr LogcatEntry_LogLevel LogcatEntry::INFO;
constexpr LogcatEntry_LogLevel LogcatEntry::WARN;
constexpr LogcatEntry_LogLevel LogcatEntry::ERR;
constexpr LogcatEntry_LogLevel LogcatEntry::FATAL;
constexpr LogcatEntry_LogLevel LogcatEntry::SILENT;
constexpr LogcatEntry_LogLevel LogcatEntry::LogLevel_MIN;
constexpr LogcatEntry_LogLevel LogcatEntry::LogLevel_MAX;
constexpr int LogcatEntry::LogLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VmConfiguration_VmHypervisorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[7];
}
bool VmConfiguration_VmHypervisorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VmConfiguration_VmHypervisorType VmConfiguration::UNKNOWN;
constexpr VmConfiguration_VmHypervisorType VmConfiguration::NONE;
constexpr VmConfiguration_VmHypervisorType VmConfiguration::KVM;
constexpr VmConfiguration_VmHypervisorType VmConfiguration::HAXM;
constexpr VmConfiguration_VmHypervisorType VmConfiguration::HVF;
constexpr VmConfiguration_VmHypervisorType VmConfiguration::WHPX;
constexpr VmConfiguration_VmHypervisorType VmConfiguration::GVM;
constexpr VmConfiguration_VmHypervisorType VmConfiguration::VmHypervisorType_MIN;
constexpr VmConfiguration_VmHypervisorType VmConfiguration::VmHypervisorType_MAX;
constexpr int VmConfiguration::VmHypervisorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyboardEvent_KeyCodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[8];
}
bool KeyboardEvent_KeyCodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KeyboardEvent_KeyCodeType KeyboardEvent::Usb;
constexpr KeyboardEvent_KeyCodeType KeyboardEvent::Evdev;
constexpr KeyboardEvent_KeyCodeType KeyboardEvent::XKB;
constexpr KeyboardEvent_KeyCodeType KeyboardEvent::Win;
constexpr KeyboardEvent_KeyCodeType KeyboardEvent::Mac;
constexpr KeyboardEvent_KeyCodeType KeyboardEvent::KeyCodeType_MIN;
constexpr KeyboardEvent_KeyCodeType KeyboardEvent::KeyCodeType_MAX;
constexpr int KeyboardEvent::KeyCodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyboardEvent_KeyEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[9];
}
bool KeyboardEvent_KeyEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KeyboardEvent_KeyEventType KeyboardEvent::keydown;
constexpr KeyboardEvent_KeyEventType KeyboardEvent::keyup;
constexpr KeyboardEvent_KeyEventType KeyboardEvent::keypress;
constexpr KeyboardEvent_KeyEventType KeyboardEvent::KeyEventType_MIN;
constexpr KeyboardEvent_KeyEventType KeyboardEvent::KeyEventType_MAX;
constexpr int KeyboardEvent::KeyEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_BatteryStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[10];
}
bool BatteryState_BatteryStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatteryState_BatteryStatus BatteryState::UNKNOWN;
constexpr BatteryState_BatteryStatus BatteryState::CHARGING;
constexpr BatteryState_BatteryStatus BatteryState::DISCHARGING;
constexpr BatteryState_BatteryStatus BatteryState::NOT_CHARGING;
constexpr BatteryState_BatteryStatus BatteryState::FULL;
constexpr BatteryState_BatteryStatus BatteryState::BatteryStatus_MIN;
constexpr BatteryState_BatteryStatus BatteryState::BatteryStatus_MAX;
constexpr int BatteryState::BatteryStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_BatteryCharger_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[11];
}
bool BatteryState_BatteryCharger_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatteryState_BatteryCharger BatteryState::NONE;
constexpr BatteryState_BatteryCharger BatteryState::AC;
constexpr BatteryState_BatteryCharger BatteryState::USB;
constexpr BatteryState_BatteryCharger BatteryState::WIRELESS;
constexpr BatteryState_BatteryCharger BatteryState::BatteryCharger_MIN;
constexpr BatteryState_BatteryCharger BatteryState::BatteryCharger_MAX;
constexpr int BatteryState::BatteryCharger_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_BatteryHealth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[12];
}
bool BatteryState_BatteryHealth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatteryState_BatteryHealth BatteryState::GOOD;
constexpr BatteryState_BatteryHealth BatteryState::FAILED;
constexpr BatteryState_BatteryHealth BatteryState::DEAD;
constexpr BatteryState_BatteryHealth BatteryState::OVERVOLTAGE;
constexpr BatteryState_BatteryHealth BatteryState::OVERHEATED;
constexpr BatteryState_BatteryHealth BatteryState::BatteryHealth_MIN;
constexpr BatteryState_BatteryHealth BatteryState::BatteryHealth_MAX;
constexpr int BatteryState::BatteryHealth_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageTransport_TransportChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[13];
}
bool ImageTransport_TransportChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageTransport_TransportChannel ImageTransport::TRANSPORT_CHANNEL_UNSPECIFIED;
constexpr ImageTransport_TransportChannel ImageTransport::MMAP;
constexpr ImageTransport_TransportChannel ImageTransport::TransportChannel_MIN;
constexpr ImageTransport_TransportChannel ImageTransport::TransportChannel_MAX;
constexpr int ImageTransport::TransportChannel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_ImgFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[14];
}
bool ImageFormat_ImgFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageFormat_ImgFormat ImageFormat::PNG;
constexpr ImageFormat_ImgFormat ImageFormat::RGBA8888;
constexpr ImageFormat_ImgFormat ImageFormat::RGB888;
constexpr ImageFormat_ImgFormat ImageFormat::ImgFormat_MIN;
constexpr ImageFormat_ImgFormat ImageFormat::ImgFormat_MAX;
constexpr int ImageFormat::ImgFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Rotation_SkinRotation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[15];
}
bool Rotation_SkinRotation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Rotation_SkinRotation Rotation::PORTRAIT;
constexpr Rotation_SkinRotation Rotation::LANDSCAPE;
constexpr Rotation_SkinRotation Rotation::REVERSE_PORTRAIT;
constexpr Rotation_SkinRotation Rotation::REVERSE_LANDSCAPE;
constexpr Rotation_SkinRotation Rotation::SkinRotation_MIN;
constexpr Rotation_SkinRotation Rotation::SkinRotation_MAX;
constexpr int Rotation::SkinRotation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhoneCall_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[16];
}
bool PhoneCall_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PhoneCall_Operation PhoneCall::InitCall;
constexpr PhoneCall_Operation PhoneCall::AcceptCall;
constexpr PhoneCall_Operation PhoneCall::RejectCallExplicit;
constexpr PhoneCall_Operation PhoneCall::RejectCallBusy;
constexpr PhoneCall_Operation PhoneCall::DisconnectCall;
constexpr PhoneCall_Operation PhoneCall::PlaceCallOnHold;
constexpr PhoneCall_Operation PhoneCall::TakeCallOffHold;
constexpr PhoneCall_Operation PhoneCall::Operation_MIN;
constexpr PhoneCall_Operation PhoneCall::Operation_MAX;
constexpr int PhoneCall::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhoneResponse_Response_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[17];
}
bool PhoneResponse_Response_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PhoneResponse_Response PhoneResponse::OK;
constexpr PhoneResponse_Response PhoneResponse::BadOperation;
constexpr PhoneResponse_Response PhoneResponse::BadNumber;
constexpr PhoneResponse_Response PhoneResponse::InvalidAction;
constexpr PhoneResponse_Response PhoneResponse::ActionFailed;
constexpr PhoneResponse_Response PhoneResponse::RadioOff;
constexpr PhoneResponse_Response PhoneResponse::Response_MIN;
constexpr PhoneResponse_Response PhoneResponse::Response_MAX;
constexpr int PhoneResponse::Response_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioFormat_SampleFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[18];
}
bool AudioFormat_SampleFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioFormat_SampleFormat AudioFormat::AUD_FMT_U8;
constexpr AudioFormat_SampleFormat AudioFormat::AUD_FMT_S16;
constexpr AudioFormat_SampleFormat AudioFormat::SampleFormat_MIN;
constexpr AudioFormat_SampleFormat AudioFormat::SampleFormat_MAX;
constexpr int AudioFormat::SampleFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioFormat_Channels_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emulator_5fcontroller_2eproto);
  return file_level_enum_descriptors_emulator_5fcontroller_2eproto[19];
}
bool AudioFormat_Channels_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioFormat_Channels AudioFormat::Mono;
constexpr AudioFormat_Channels AudioFormat::Stereo;
constexpr AudioFormat_Channels AudioFormat::Channels_MIN;
constexpr AudioFormat_Channels AudioFormat::Channels_MAX;
constexpr int AudioFormat::Channels_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void VmRunState::InitAsDefaultInstance() {
}
class VmRunState::_Internal {
 public:
};

VmRunState::VmRunState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.VmRunState)
}
VmRunState::VmRunState(const VmRunState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.VmRunState)
}

void VmRunState::SharedCtor() {
  state_ = 0;
}

VmRunState::~VmRunState() {
  // @@protoc_insertion_point(destructor:android.emulation.control.VmRunState)
  SharedDtor();
}

void VmRunState::SharedDtor() {
}

void VmRunState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VmRunState& VmRunState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VmRunState_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void VmRunState::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.VmRunState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* VmRunState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.VmRunState.RunState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::android::emulation::control::VmRunState_RunState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VmRunState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.VmRunState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.VmRunState.RunState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.VmRunState)
  return target;
}

size_t VmRunState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.VmRunState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .android.emulation.control.VmRunState.RunState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VmRunState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.VmRunState)
  GOOGLE_DCHECK_NE(&from, this);
  const VmRunState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VmRunState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.VmRunState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.VmRunState)
    MergeFrom(*source);
  }
}

void VmRunState::MergeFrom(const VmRunState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.VmRunState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void VmRunState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.VmRunState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VmRunState::CopyFrom(const VmRunState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.VmRunState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VmRunState::IsInitialized() const {
  return true;
}

void VmRunState::InternalSwap(VmRunState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VmRunState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParameterValue::InitAsDefaultInstance() {
}
class ParameterValue::_Internal {
 public:
};

ParameterValue::ParameterValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.ParameterValue)
}
ParameterValue::ParameterValue(const ParameterValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.ParameterValue)
}

void ParameterValue::SharedCtor() {
}

ParameterValue::~ParameterValue() {
  // @@protoc_insertion_point(destructor:android.emulation.control.ParameterValue)
  SharedDtor();
}

void ParameterValue::SharedDtor() {
}

void ParameterValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParameterValue& ParameterValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParameterValue_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void ParameterValue::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.ParameterValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

const char* ParameterValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParameterValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.ParameterValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.ParameterValue)
  return target;
}

size_t ParameterValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.ParameterValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParameterValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.ParameterValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ParameterValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParameterValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.ParameterValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.ParameterValue)
    MergeFrom(*source);
  }
}

void ParameterValue::MergeFrom(const ParameterValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.ParameterValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ParameterValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.ParameterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterValue::CopyFrom(const ParameterValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.ParameterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterValue::IsInitialized() const {
  return true;
}

void ParameterValue::InternalSwap(ParameterValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhysicalModelValue::InitAsDefaultInstance() {
  ::android::emulation::control::_PhysicalModelValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::android::emulation::control::ParameterValue*>(
      ::android::emulation::control::ParameterValue::internal_default_instance());
}
class PhysicalModelValue::_Internal {
 public:
  static const ::android::emulation::control::ParameterValue& value(const PhysicalModelValue* msg);
};

const ::android::emulation::control::ParameterValue&
PhysicalModelValue::_Internal::value(const PhysicalModelValue* msg) {
  return *msg->value_;
}
PhysicalModelValue::PhysicalModelValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.PhysicalModelValue)
}
PhysicalModelValue::PhysicalModelValue(const PhysicalModelValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::android::emulation::control::ParameterValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&target_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.PhysicalModelValue)
}

void PhysicalModelValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhysicalModelValue_emulator_5fcontroller_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&value_)) + sizeof(status_));
}

PhysicalModelValue::~PhysicalModelValue() {
  // @@protoc_insertion_point(destructor:android.emulation.control.PhysicalModelValue)
  SharedDtor();
}

void PhysicalModelValue::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void PhysicalModelValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhysicalModelValue& PhysicalModelValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhysicalModelValue_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void PhysicalModelValue::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.PhysicalModelValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&target_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* PhysicalModelValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.PhysicalModelValue.PhysicalType target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::android::emulation::control::PhysicalModelValue_PhysicalType>(val));
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.PhysicalModelValue.State status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::android::emulation::control::PhysicalModelValue_State>(val));
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.ParameterValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhysicalModelValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.PhysicalModelValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.PhysicalModelValue.PhysicalType target = 1;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_target(), target);
  }

  // .android.emulation.control.PhysicalModelValue.State status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .android.emulation.control.ParameterValue value = 3;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.PhysicalModelValue)
  return target;
}

size_t PhysicalModelValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.PhysicalModelValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .android.emulation.control.ParameterValue value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .android.emulation.control.PhysicalModelValue.PhysicalType target = 1;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target());
  }

  // .android.emulation.control.PhysicalModelValue.State status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicalModelValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.PhysicalModelValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicalModelValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhysicalModelValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.PhysicalModelValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.PhysicalModelValue)
    MergeFrom(*source);
  }
}

void PhysicalModelValue::MergeFrom(const PhysicalModelValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.PhysicalModelValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::android::emulation::control::ParameterValue::MergeFrom(from._internal_value());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PhysicalModelValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.PhysicalModelValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalModelValue::CopyFrom(const PhysicalModelValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.PhysicalModelValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalModelValue::IsInitialized() const {
  return true;
}

void PhysicalModelValue::InternalSwap(PhysicalModelValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(target_, other->target_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicalModelValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorValue::InitAsDefaultInstance() {
  ::android::emulation::control::_SensorValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::android::emulation::control::ParameterValue*>(
      ::android::emulation::control::ParameterValue::internal_default_instance());
}
class SensorValue::_Internal {
 public:
  static const ::android::emulation::control::ParameterValue& value(const SensorValue* msg);
};

const ::android::emulation::control::ParameterValue&
SensorValue::_Internal::value(const SensorValue* msg) {
  return *msg->value_;
}
SensorValue::SensorValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.SensorValue)
}
SensorValue::SensorValue(const SensorValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::android::emulation::control::ParameterValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&target_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.SensorValue)
}

void SensorValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorValue_emulator_5fcontroller_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&value_)) + sizeof(status_));
}

SensorValue::~SensorValue() {
  // @@protoc_insertion_point(destructor:android.emulation.control.SensorValue)
  SharedDtor();
}

void SensorValue::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void SensorValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorValue& SensorValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorValue_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void SensorValue::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.SensorValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&target_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* SensorValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.SensorValue.SensorType target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::android::emulation::control::SensorValue_SensorType>(val));
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.SensorValue.State status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::android::emulation::control::SensorValue_State>(val));
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.ParameterValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.SensorValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.SensorValue.SensorType target = 1;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_target(), target);
  }

  // .android.emulation.control.SensorValue.State status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .android.emulation.control.ParameterValue value = 3;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.SensorValue)
  return target;
}

size_t SensorValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.SensorValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .android.emulation.control.ParameterValue value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .android.emulation.control.SensorValue.SensorType target = 1;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target());
  }

  // .android.emulation.control.SensorValue.State status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.SensorValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.SensorValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.SensorValue)
    MergeFrom(*source);
  }
}

void SensorValue::MergeFrom(const SensorValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.SensorValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::android::emulation::control::ParameterValue::MergeFrom(from._internal_value());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SensorValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.SensorValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorValue::CopyFrom(const SensorValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.SensorValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorValue::IsInitialized() const {
  return true;
}

void SensorValue::InternalSwap(SensorValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(target_, other->target_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogMessage::InitAsDefaultInstance() {
}
class LogMessage::_Internal {
 public:
};

LogMessage::LogMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contents().empty()) {
    contents_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contents_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_) -
    reinterpret_cast<char*>(&start_)) + sizeof(sort_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.LogMessage)
}

void LogMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMessage_emulator_5fcontroller_2eproto.base);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_) -
      reinterpret_cast<char*>(&start_)) + sizeof(sort_));
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:android.emulation.control.LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMessage& LogMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMessage_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  contents_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_) -
      reinterpret_cast<char*>(&start_)) + sizeof(sort_));
  _internal_metadata_.Clear();
}

const char* LogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.LogMessage.contents"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 next = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.LogMessage.LogType sort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_sort(static_cast<::android::emulation::control::LogMessage_LogType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .android.emulation.control.LogcatEntry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contents = 1;
  if (this->contents().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contents().data(), static_cast<int>(this->_internal_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.LogMessage.contents");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contents(), target);
  }

  // int64 start = 2;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_start(), target);
  }

  // int64 next = 3;
  if (this->next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_next(), target);
  }

  // .android.emulation.control.LogMessage.LogType sort = 4;
  if (this->sort() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sort(), target);
  }

  // repeated .android.emulation.control.LogcatEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.LogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.emulation.control.LogcatEntry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contents = 1;
  if (this->contents().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contents());
  }

  // int64 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start());
  }

  // int64 next = 3;
  if (this->next() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_next());
  }

  // .android.emulation.control.LogMessage.LogType sort = 4;
  if (this->sort() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.LogMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.contents().size() > 0) {

    contents_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contents_);
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.next() != 0) {
    _internal_set_next(from._internal_next());
  }
  if (from.sort() != 0) {
    _internal_set_sort(from._internal_sort());
  }
}

void LogMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  contents_.Swap(&other->contents_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_, other->start_);
  swap(next_, other->next_);
  swap(sort_, other->sort_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogcatEntry::InitAsDefaultInstance() {
}
class LogcatEntry::_Internal {
 public:
};

LogcatEntry::LogcatEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.LogcatEntry)
}
LogcatEntry::LogcatEntry(const LogcatEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.LogcatEntry)
}

void LogcatEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogcatEntry_emulator_5fcontroller_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(level_));
}

LogcatEntry::~LogcatEntry() {
  // @@protoc_insertion_point(destructor:android.emulation.control.LogcatEntry)
  SharedDtor();
}

void LogcatEntry::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogcatEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogcatEntry& LogcatEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogcatEntry_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void LogcatEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.LogcatEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* LogcatEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.LogcatEntry.LogLevel level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::android::emulation::control::LogcatEntry_LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // string tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.LogcatEntry.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.LogcatEntry.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogcatEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.LogcatEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 tid = 3;
  if (this->tid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tid(), target);
  }

  // .android.emulation.control.LogcatEntry.LogLevel level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_level(), target);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.LogcatEntry.tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tag(), target);
  }

  // string msg = 6;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.LogcatEntry.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.LogcatEntry)
  return target;
}

size_t LogcatEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.LogcatEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 5;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string msg = 6;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // uint32 tid = 3;
  if (this->tid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tid());
  }

  // .android.emulation.control.LogcatEntry.LogLevel level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogcatEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.LogcatEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogcatEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogcatEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.LogcatEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.LogcatEntry)
    MergeFrom(*source);
  }
}

void LogcatEntry::MergeFrom(const LogcatEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.LogcatEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.tid() != 0) {
    _internal_set_tid(from._internal_tid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void LogcatEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.LogcatEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogcatEntry::CopyFrom(const LogcatEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.LogcatEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogcatEntry::IsInitialized() const {
  return true;
}

void LogcatEntry::InternalSwap(LogcatEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogcatEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VmConfiguration::InitAsDefaultInstance() {
}
class VmConfiguration::_Internal {
 public:
};

VmConfiguration::VmConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.VmConfiguration)
}
VmConfiguration::VmConfiguration(const VmConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hypervisortype_, &from.hypervisortype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ramsizebytes_) -
    reinterpret_cast<char*>(&hypervisortype_)) + sizeof(ramsizebytes_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.VmConfiguration)
}

void VmConfiguration::SharedCtor() {
  ::memset(&hypervisortype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ramsizebytes_) -
      reinterpret_cast<char*>(&hypervisortype_)) + sizeof(ramsizebytes_));
}

VmConfiguration::~VmConfiguration() {
  // @@protoc_insertion_point(destructor:android.emulation.control.VmConfiguration)
  SharedDtor();
}

void VmConfiguration::SharedDtor() {
}

void VmConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VmConfiguration& VmConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VmConfiguration_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void VmConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.VmConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hypervisortype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ramsizebytes_) -
      reinterpret_cast<char*>(&hypervisortype_)) + sizeof(ramsizebytes_));
  _internal_metadata_.Clear();
}

const char* VmConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.VmConfiguration.VmHypervisorType hypervisorType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_hypervisortype(static_cast<::android::emulation::control::VmConfiguration_VmHypervisorType>(val));
        } else goto handle_unusual;
        continue;
      // int32 numberOfCpuCores = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numberofcpucores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ramSizeBytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ramsizebytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VmConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.VmConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.VmConfiguration.VmHypervisorType hypervisorType = 1;
  if (this->hypervisortype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hypervisortype(), target);
  }

  // int32 numberOfCpuCores = 2;
  if (this->numberofcpucores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_numberofcpucores(), target);
  }

  // int64 ramSizeBytes = 3;
  if (this->ramsizebytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ramsizebytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.VmConfiguration)
  return target;
}

size_t VmConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.VmConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .android.emulation.control.VmConfiguration.VmHypervisorType hypervisorType = 1;
  if (this->hypervisortype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hypervisortype());
  }

  // int32 numberOfCpuCores = 2;
  if (this->numberofcpucores() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofcpucores());
  }

  // int64 ramSizeBytes = 3;
  if (this->ramsizebytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ramsizebytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VmConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.VmConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const VmConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VmConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.VmConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.VmConfiguration)
    MergeFrom(*source);
  }
}

void VmConfiguration::MergeFrom(const VmConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.VmConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hypervisortype() != 0) {
    _internal_set_hypervisortype(from._internal_hypervisortype());
  }
  if (from.numberofcpucores() != 0) {
    _internal_set_numberofcpucores(from._internal_numberofcpucores());
  }
  if (from.ramsizebytes() != 0) {
    _internal_set_ramsizebytes(from._internal_ramsizebytes());
  }
}

void VmConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.VmConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VmConfiguration::CopyFrom(const VmConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.VmConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VmConfiguration::IsInitialized() const {
  return true;
}

void VmConfiguration::InternalSwap(VmConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hypervisortype_, other->hypervisortype_);
  swap(numberofcpucores_, other->numberofcpucores_);
  swap(ramsizebytes_, other->ramsizebytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VmConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClipData::InitAsDefaultInstance() {
}
class ClipData::_Internal {
 public:
};

ClipData::ClipData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.ClipData)
}
ClipData::ClipData(const ClipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.ClipData)
}

void ClipData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClipData_emulator_5fcontroller_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClipData::~ClipData() {
  // @@protoc_insertion_point(destructor:android.emulation.control.ClipData)
  SharedDtor();
}

void ClipData::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClipData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClipData& ClipData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClipData_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void ClipData::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.ClipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ClipData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.ClipData.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClipData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.ClipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.ClipData.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.ClipData)
  return target;
}

size_t ClipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.ClipData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClipData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.ClipData)
  GOOGLE_DCHECK_NE(&from, this);
  const ClipData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClipData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.ClipData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.ClipData)
    MergeFrom(*source);
  }
}

void ClipData::MergeFrom(const ClipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.ClipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void ClipData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.ClipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipData::CopyFrom(const ClipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.ClipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipData::IsInitialized() const {
  return true;
}

void ClipData::InternalSwap(ClipData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClipData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Touch::InitAsDefaultInstance() {
}
class Touch::_Internal {
 public:
};

Touch::Touch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.Touch)
}
Touch::Touch(const Touch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&touch_minor_) -
    reinterpret_cast<char*>(&x_)) + sizeof(touch_minor_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.Touch)
}

void Touch::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touch_minor_) -
      reinterpret_cast<char*>(&x_)) + sizeof(touch_minor_));
}

Touch::~Touch() {
  // @@protoc_insertion_point(destructor:android.emulation.control.Touch)
  SharedDtor();
}

void Touch::SharedDtor() {
}

void Touch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Touch& Touch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Touch_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void Touch::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.Touch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touch_minor_) -
      reinterpret_cast<char*>(&x_)) + sizeof(touch_minor_));
  _internal_metadata_.Clear();
}

const char* Touch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 touch_major = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          touch_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 touch_minor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          touch_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Touch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.Touch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 identifier = 3;
  if (this->identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_identifier(), target);
  }

  // int32 pressure = 4;
  if (this->pressure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pressure(), target);
  }

  // int32 touch_major = 5;
  if (this->touch_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_touch_major(), target);
  }

  // int32 touch_minor = 6;
  if (this->touch_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_touch_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.Touch)
  return target;
}

size_t Touch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.Touch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 identifier = 3;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_identifier());
  }

  // int32 pressure = 4;
  if (this->pressure() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pressure());
  }

  // int32 touch_major = 5;
  if (this->touch_major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_touch_major());
  }

  // int32 touch_minor = 6;
  if (this->touch_minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_touch_minor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Touch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.Touch)
  GOOGLE_DCHECK_NE(&from, this);
  const Touch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Touch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.Touch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.Touch)
    MergeFrom(*source);
  }
}

void Touch::MergeFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.Touch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from.pressure() != 0) {
    _internal_set_pressure(from._internal_pressure());
  }
  if (from.touch_major() != 0) {
    _internal_set_touch_major(from._internal_touch_major());
  }
  if (from.touch_minor() != 0) {
    _internal_set_touch_minor(from._internal_touch_minor());
  }
}

void Touch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.Touch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Touch::CopyFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.Touch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Touch::IsInitialized() const {
  return true;
}

void Touch::InternalSwap(Touch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(identifier_, other->identifier_);
  swap(pressure_, other->pressure_);
  swap(touch_major_, other->touch_major_);
  swap(touch_minor_, other->touch_minor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Touch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TouchEvent::InitAsDefaultInstance() {
}
class TouchEvent::_Internal {
 public:
};

TouchEvent::TouchEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.TouchEvent)
}
TouchEvent::TouchEvent(const TouchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      touches_(from.touches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.TouchEvent)
}

void TouchEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TouchEvent_emulator_5fcontroller_2eproto.base);
  device_ = 0;
}

TouchEvent::~TouchEvent() {
  // @@protoc_insertion_point(destructor:android.emulation.control.TouchEvent)
  SharedDtor();
}

void TouchEvent::SharedDtor() {
}

void TouchEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TouchEvent& TouchEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TouchEvent_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void TouchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.TouchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  touches_.Clear();
  device_ = 0;
  _internal_metadata_.Clear();
}

const char* TouchEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.emulation.control.Touch touches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_touches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TouchEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.TouchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.emulation.control.Touch touches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_touches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_touches(i), target, stream);
  }

  // int32 device = 2;
  if (this->device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.TouchEvent)
  return target;
}

size_t TouchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.TouchEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.emulation.control.Touch touches = 1;
  total_size += 1UL * this->_internal_touches_size();
  for (const auto& msg : this->touches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 device = 2;
  if (this->device() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TouchEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.TouchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TouchEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TouchEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.TouchEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.TouchEvent)
    MergeFrom(*source);
  }
}

void TouchEvent::MergeFrom(const TouchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.TouchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touches_.MergeFrom(from.touches_);
  if (from.device() != 0) {
    _internal_set_device(from._internal_device());
  }
}

void TouchEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchEvent::CopyFrom(const TouchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchEvent::IsInitialized() const {
  return true;
}

void TouchEvent::InternalSwap(TouchEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  touches_.InternalSwap(&other->touches_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TouchEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MouseEvent::InitAsDefaultInstance() {
}
class MouseEvent::_Internal {
 public:
};

MouseEvent::MouseEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.MouseEvent)
}
MouseEvent::MouseEvent(const MouseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_) -
    reinterpret_cast<char*>(&x_)) + sizeof(device_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.MouseEvent)
}

void MouseEvent::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_) -
      reinterpret_cast<char*>(&x_)) + sizeof(device_));
}

MouseEvent::~MouseEvent() {
  // @@protoc_insertion_point(destructor:android.emulation.control.MouseEvent)
  SharedDtor();
}

void MouseEvent::SharedDtor() {
}

void MouseEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MouseEvent& MouseEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MouseEvent_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void MouseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.MouseEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_) -
      reinterpret_cast<char*>(&x_)) + sizeof(device_));
  _internal_metadata_.Clear();
}

const char* MouseEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buttons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          buttons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 device = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MouseEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.MouseEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 buttons = 3;
  if (this->buttons() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_buttons(), target);
  }

  // int32 device = 4;
  if (this->device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.MouseEvent)
  return target;
}

size_t MouseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.MouseEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 buttons = 3;
  if (this->buttons() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buttons());
  }

  // int32 device = 4;
  if (this->device() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.MouseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MouseEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.MouseEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.MouseEvent)
    MergeFrom(*source);
  }
}

void MouseEvent::MergeFrom(const MouseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.MouseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.buttons() != 0) {
    _internal_set_buttons(from._internal_buttons());
  }
  if (from.device() != 0) {
    _internal_set_device(from._internal_device());
  }
}

void MouseEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.MouseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseEvent::CopyFrom(const MouseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.MouseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseEvent::IsInitialized() const {
  return true;
}

void MouseEvent::InternalSwap(MouseEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(buttons_, other->buttons_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyboardEvent::InitAsDefaultInstance() {
}
class KeyboardEvent::_Internal {
 public:
};

KeyboardEvent::KeyboardEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.KeyboardEvent)
}
KeyboardEvent::KeyboardEvent(const KeyboardEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&codetype_, &from.codetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&keycode_) -
    reinterpret_cast<char*>(&codetype_)) + sizeof(keycode_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.KeyboardEvent)
}

void KeyboardEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyboardEvent_emulator_5fcontroller_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&codetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keycode_) -
      reinterpret_cast<char*>(&codetype_)) + sizeof(keycode_));
}

KeyboardEvent::~KeyboardEvent() {
  // @@protoc_insertion_point(destructor:android.emulation.control.KeyboardEvent)
  SharedDtor();
}

void KeyboardEvent::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyboardEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyboardEvent& KeyboardEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyboardEvent_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void KeyboardEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.KeyboardEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&codetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keycode_) -
      reinterpret_cast<char*>(&codetype_)) + sizeof(keycode_));
  _internal_metadata_.Clear();
}

const char* KeyboardEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.KeyboardEvent.KeyCodeType codeType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_codetype(static_cast<::android::emulation::control::KeyboardEvent_KeyCodeType>(val));
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.KeyboardEvent.KeyEventType eventType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::android::emulation::control::KeyboardEvent_KeyEventType>(val));
        } else goto handle_unusual;
        continue;
      // int32 keyCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.KeyboardEvent.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.KeyboardEvent.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyboardEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.KeyboardEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.KeyboardEvent.KeyCodeType codeType = 1;
  if (this->codetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_codetype(), target);
  }

  // .android.emulation.control.KeyboardEvent.KeyEventType eventType = 2;
  if (this->eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_eventtype(), target);
  }

  // int32 keyCode = 3;
  if (this->keycode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_keycode(), target);
  }

  // string key = 4;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.KeyboardEvent.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  // string text = 5;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.KeyboardEvent.text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.KeyboardEvent)
  return target;
}

size_t KeyboardEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.KeyboardEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string text = 5;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .android.emulation.control.KeyboardEvent.KeyCodeType codeType = 1;
  if (this->codetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_codetype());
  }

  // .android.emulation.control.KeyboardEvent.KeyEventType eventType = 2;
  if (this->eventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventtype());
  }

  // int32 keyCode = 3;
  if (this->keycode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keycode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyboardEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.KeyboardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyboardEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyboardEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.KeyboardEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.KeyboardEvent)
    MergeFrom(*source);
  }
}

void KeyboardEvent::MergeFrom(const KeyboardEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.KeyboardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.codetype() != 0) {
    _internal_set_codetype(from._internal_codetype());
  }
  if (from.eventtype() != 0) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  if (from.keycode() != 0) {
    _internal_set_keycode(from._internal_keycode());
  }
}

void KeyboardEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.KeyboardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyboardEvent::CopyFrom(const KeyboardEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.KeyboardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyboardEvent::IsInitialized() const {
  return true;
}

void KeyboardEvent::InternalSwap(KeyboardEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(codetype_, other->codetype_);
  swap(eventtype_, other->eventtype_);
  swap(keycode_, other->keycode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyboardEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fingerprint::InitAsDefaultInstance() {
}
class Fingerprint::_Internal {
 public:
};

Fingerprint::Fingerprint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.Fingerprint)
}
Fingerprint::Fingerprint(const Fingerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&istouching_, &from.istouching_,
    static_cast<size_t>(reinterpret_cast<char*>(&touchid_) -
    reinterpret_cast<char*>(&istouching_)) + sizeof(touchid_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.Fingerprint)
}

void Fingerprint::SharedCtor() {
  ::memset(&istouching_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touchid_) -
      reinterpret_cast<char*>(&istouching_)) + sizeof(touchid_));
}

Fingerprint::~Fingerprint() {
  // @@protoc_insertion_point(destructor:android.emulation.control.Fingerprint)
  SharedDtor();
}

void Fingerprint::SharedDtor() {
}

void Fingerprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint& Fingerprint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.Fingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&istouching_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touchid_) -
      reinterpret_cast<char*>(&istouching_)) + sizeof(touchid_));
  _internal_metadata_.Clear();
}

const char* Fingerprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isTouching = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          istouching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 touchId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          touchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fingerprint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.Fingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isTouching = 1;
  if (this->istouching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_istouching(), target);
  }

  // int32 touchId = 2;
  if (this->touchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_touchid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.Fingerprint)
  return target;
}

size_t Fingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.Fingerprint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isTouching = 1;
  if (this->istouching() != 0) {
    total_size += 1 + 1;
  }

  // int32 touchId = 2;
  if (this->touchid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_touchid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.Fingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  const Fingerprint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fingerprint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.Fingerprint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.Fingerprint)
    MergeFrom(*source);
  }
}

void Fingerprint::MergeFrom(const Fingerprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.Fingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.istouching() != 0) {
    _internal_set_istouching(from._internal_istouching());
  }
  if (from.touchid() != 0) {
    _internal_set_touchid(from._internal_touchid());
  }
}

void Fingerprint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.Fingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fingerprint::CopyFrom(const Fingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.Fingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint::IsInitialized() const {
  return true;
}

void Fingerprint::InternalSwap(Fingerprint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(istouching_, other->istouching_);
  swap(touchid_, other->touchid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fingerprint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpsState::InitAsDefaultInstance() {
}
class GpsState::_Internal {
 public:
};

GpsState::GpsState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.GpsState)
}
GpsState::GpsState(const GpsState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.GpsState)
}

void GpsState::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
}

GpsState::~GpsState() {
  // @@protoc_insertion_point(destructor:android.emulation.control.GpsState)
  SharedDtor();
}

void GpsState::SharedDtor() {
}

void GpsState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpsState& GpsState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpsState_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void GpsState::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.GpsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

const char* GpsState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool passiveUpdate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          passiveupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bearing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          bearing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 satellites = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpsState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.GpsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool passiveUpdate = 1;
  if (this->passiveupdate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_passiveupdate(), target);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // double speed = 4;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_speed(), target);
  }

  // double bearing = 5;
  if (!(this->bearing() <= 0 && this->bearing() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_bearing(), target);
  }

  // double altitude = 6;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_altitude(), target);
  }

  // int32 satellites = 7;
  if (this->satellites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_satellites(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.GpsState)
  return target;
}

size_t GpsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.GpsState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double speed = 4;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 8;
  }

  // bool passiveUpdate = 1;
  if (this->passiveupdate() != 0) {
    total_size += 1 + 1;
  }

  // int32 satellites = 7;
  if (this->satellites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_satellites());
  }

  // double bearing = 5;
  if (!(this->bearing() <= 0 && this->bearing() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 6;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpsState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.GpsState)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpsState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.GpsState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.GpsState)
    MergeFrom(*source);
  }
}

void GpsState::MergeFrom(const GpsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.GpsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.passiveupdate() != 0) {
    _internal_set_passiveupdate(from._internal_passiveupdate());
  }
  if (from.satellites() != 0) {
    _internal_set_satellites(from._internal_satellites());
  }
  if (!(from.bearing() <= 0 && from.bearing() >= 0)) {
    _internal_set_bearing(from._internal_bearing());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
}

void GpsState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.GpsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsState::CopyFrom(const GpsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.GpsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsState::IsInitialized() const {
  return true;
}

void GpsState::InternalSwap(GpsState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(speed_, other->speed_);
  swap(passiveupdate_, other->passiveupdate_);
  swap(satellites_, other->satellites_);
  swap(bearing_, other->bearing_);
  swap(altitude_, other->altitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatteryState::InitAsDefaultInstance() {
}
class BatteryState::_Internal {
 public:
};

BatteryState::BatteryState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.BatteryState)
}
BatteryState::BatteryState(const BatteryState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hasbattery_, &from.hasbattery_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&hasbattery_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.BatteryState)
}

void BatteryState::SharedCtor() {
  ::memset(&hasbattery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&hasbattery_)) + sizeof(status_));
}

BatteryState::~BatteryState() {
  // @@protoc_insertion_point(destructor:android.emulation.control.BatteryState)
  SharedDtor();
}

void BatteryState::SharedDtor() {
}

void BatteryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryState& BatteryState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryState_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void BatteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.BatteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hasbattery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&hasbattery_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* BatteryState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool hasBattery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hasbattery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isPresent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ispresent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.BatteryState.BatteryCharger charger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_charger(static_cast<::android::emulation::control::BatteryState_BatteryCharger>(val));
        } else goto handle_unusual;
        continue;
      // int32 chargeLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chargelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.BatteryState.BatteryHealth health = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_health(static_cast<::android::emulation::control::BatteryState_BatteryHealth>(val));
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.BatteryState.BatteryStatus status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::android::emulation::control::BatteryState_BatteryStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.BatteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasBattery = 1;
  if (this->hasbattery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hasbattery(), target);
  }

  // bool isPresent = 2;
  if (this->ispresent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ispresent(), target);
  }

  // .android.emulation.control.BatteryState.BatteryCharger charger = 3;
  if (this->charger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_charger(), target);
  }

  // int32 chargeLevel = 4;
  if (this->chargelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chargelevel(), target);
  }

  // .android.emulation.control.BatteryState.BatteryHealth health = 5;
  if (this->health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_health(), target);
  }

  // .android.emulation.control.BatteryState.BatteryStatus status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.BatteryState)
  return target;
}

size_t BatteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.BatteryState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool hasBattery = 1;
  if (this->hasbattery() != 0) {
    total_size += 1 + 1;
  }

  // bool isPresent = 2;
  if (this->ispresent() != 0) {
    total_size += 1 + 1;
  }

  // .android.emulation.control.BatteryState.BatteryCharger charger = 3;
  if (this->charger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_charger());
  }

  // int32 chargeLevel = 4;
  if (this->chargelevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chargelevel());
  }

  // .android.emulation.control.BatteryState.BatteryHealth health = 5;
  if (this->health() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_health());
  }

  // .android.emulation.control.BatteryState.BatteryStatus status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.BatteryState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.BatteryState)
    MergeFrom(*source);
  }
}

void BatteryState::MergeFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hasbattery() != 0) {
    _internal_set_hasbattery(from._internal_hasbattery());
  }
  if (from.ispresent() != 0) {
    _internal_set_ispresent(from._internal_ispresent());
  }
  if (from.charger() != 0) {
    _internal_set_charger(from._internal_charger());
  }
  if (from.chargelevel() != 0) {
    _internal_set_chargelevel(from._internal_chargelevel());
  }
  if (from.health() != 0) {
    _internal_set_health(from._internal_health());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void BatteryState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryState::CopyFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryState::IsInitialized() const {
  return true;
}

void BatteryState::InternalSwap(BatteryState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hasbattery_, other->hasbattery_);
  swap(ispresent_, other->ispresent_);
  swap(charger_, other->charger_);
  swap(chargelevel_, other->chargelevel_);
  swap(health_, other->health_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageTransport::InitAsDefaultInstance() {
}
class ImageTransport::_Internal {
 public:
};

ImageTransport::ImageTransport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.ImageTransport)
}
ImageTransport::ImageTransport(const ImageTransport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_handle().empty()) {
    handle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.ImageTransport)
}

void ImageTransport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageTransport_emulator_5fcontroller_2eproto.base);
  handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
}

ImageTransport::~ImageTransport() {
  // @@protoc_insertion_point(destructor:android.emulation.control.ImageTransport)
  SharedDtor();
}

void ImageTransport::SharedDtor() {
  handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageTransport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageTransport& ImageTransport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageTransport_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void ImageTransport::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.ImageTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
  _internal_metadata_.Clear();
}

const char* ImageTransport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.ImageTransport.TransportChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_channel(static_cast<::android::emulation::control::ImageTransport_TransportChannel>(val));
        } else goto handle_unusual;
        continue;
      // string handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_handle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.ImageTransport.handle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageTransport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.ImageTransport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.ImageTransport.TransportChannel channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_channel(), target);
  }

  // string handle = 2;
  if (this->handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.ImageTransport.handle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.ImageTransport)
  return target;
}

size_t ImageTransport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.ImageTransport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string handle = 2;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_handle());
  }

  // .android.emulation.control.ImageTransport.TransportChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageTransport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.ImageTransport)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageTransport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageTransport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.ImageTransport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.ImageTransport)
    MergeFrom(*source);
  }
}

void ImageTransport::MergeFrom(const ImageTransport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.ImageTransport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void ImageTransport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.ImageTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageTransport::CopyFrom(const ImageTransport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.ImageTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageTransport::IsInitialized() const {
  return true;
}

void ImageTransport::InternalSwap(ImageTransport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  handle_.Swap(&other->handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageTransport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageFormat::InitAsDefaultInstance() {
  ::android::emulation::control::_ImageFormat_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::android::emulation::control::Rotation*>(
      ::android::emulation::control::Rotation::internal_default_instance());
  ::android::emulation::control::_ImageFormat_default_instance_._instance.get_mutable()->transport_ = const_cast< ::android::emulation::control::ImageTransport*>(
      ::android::emulation::control::ImageTransport::internal_default_instance());
}
class ImageFormat::_Internal {
 public:
  static const ::android::emulation::control::Rotation& rotation(const ImageFormat* msg);
  static const ::android::emulation::control::ImageTransport& transport(const ImageFormat* msg);
};

const ::android::emulation::control::Rotation&
ImageFormat::_Internal::rotation(const ImageFormat* msg) {
  return *msg->rotation_;
}
const ::android::emulation::control::ImageTransport&
ImageFormat::_Internal::transport(const ImageFormat* msg) {
  return *msg->transport_;
}
ImageFormat::ImageFormat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.ImageFormat)
}
ImageFormat::ImageFormat(const ImageFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rotation()) {
    rotation_ = new ::android::emulation::control::Rotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_transport()) {
    transport_ = new ::android::emulation::control::ImageTransport(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_) -
    reinterpret_cast<char*>(&format_)) + sizeof(display_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.ImageFormat)
}

void ImageFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageFormat_emulator_5fcontroller_2eproto.base);
  ::memset(&rotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&rotation_)) + sizeof(display_));
}

ImageFormat::~ImageFormat() {
  // @@protoc_insertion_point(destructor:android.emulation.control.ImageFormat)
  SharedDtor();
}

void ImageFormat::SharedDtor() {
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete transport_;
}

void ImageFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageFormat& ImageFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageFormat_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void ImageFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.ImageFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&format_)) + sizeof(display_));
  _internal_metadata_.Clear();
}

const char* ImageFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.ImageFormat.ImgFormat format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::android::emulation::control::ImageFormat_ImgFormat>(val));
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.Rotation rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 display = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.ImageTransport transport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.ImageFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.ImageFormat.ImgFormat format = 1;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_format(), target);
  }

  // .android.emulation.control.Rotation rotation = 2;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // uint32 display = 5;
  if (this->display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_display(), target);
  }

  // .android.emulation.control.ImageTransport transport = 6;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::transport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.ImageFormat)
  return target;
}

size_t ImageFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.ImageFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .android.emulation.control.Rotation rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .android.emulation.control.ImageTransport transport = 6;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  // .android.emulation.control.ImageFormat.ImgFormat format = 1;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // uint32 display = 5;
  if (this->display() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_display());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.ImageFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.ImageFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.ImageFormat)
    MergeFrom(*source);
  }
}

void ImageFormat::MergeFrom(const ImageFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.ImageFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rotation()) {
    _internal_mutable_rotation()->::android::emulation::control::Rotation::MergeFrom(from._internal_rotation());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::android::emulation::control::ImageTransport::MergeFrom(from._internal_transport());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.display() != 0) {
    _internal_set_display(from._internal_display());
  }
}

void ImageFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.ImageFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFormat::CopyFrom(const ImageFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.ImageFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFormat::IsInitialized() const {
  return true;
}

void ImageFormat::InternalSwap(ImageFormat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rotation_, other->rotation_);
  swap(transport_, other->transport_);
  swap(format_, other->format_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(display_, other->display_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::android::emulation::control::_Image_default_instance_._instance.get_mutable()->format_ = const_cast< ::android::emulation::control::ImageFormat*>(
      ::android::emulation::control::ImageFormat::internal_default_instance());
}
class Image::_Internal {
 public:
  static const ::android::emulation::control::ImageFormat& format(const Image* msg);
};

const ::android::emulation::control::ImageFormat&
Image::_Internal::format(const Image* msg) {
  return *msg->format_;
}
Image::Image()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from._internal_has_format()) {
    format_ = new ::android::emulation::control::ImageFormat(*from.format_);
  } else {
    format_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&width_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_emulator_5fcontroller_2eproto.base);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&format_)) + sizeof(seq_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:android.emulation.control.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete format_;
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && format_ != nullptr) {
    delete format_;
  }
  format_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&width_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.ImageFormat format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestampUs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestampus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.ImageFormat format = 1;
  if (this->has_format()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::format(this), target, stream);
  }

  // uint32 width = 2 [deprecated = true];
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3 [deprecated = true];
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // bytes image = 4;
  if (this->image().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_image(), target);
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq(), target);
  }

  // uint64 timestampUs = 6;
  if (this->timestampus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timestampus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 4;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // .android.emulation.control.ImageFormat format = 1;
  if (this->has_format()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);
  }

  // uint32 width = 2 [deprecated = true];
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 3 [deprecated = true];
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // uint64 timestampUs = 6;
  if (this->timestampus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestampus());
  }

  // uint32 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_format()) {
    _internal_mutable_format()->::android::emulation::control::ImageFormat::MergeFrom(from._internal_format());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.timestampus() != 0) {
    _internal_set_timestampus(from._internal_timestampus());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(format_, other->format_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(timestampus_, other->timestampus_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rotation::InitAsDefaultInstance() {
}
class Rotation::_Internal {
 public:
};

Rotation::Rotation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.Rotation)
}
Rotation::Rotation(const Rotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xaxis_, &from.xaxis_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&xaxis_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.Rotation)
}

void Rotation::SharedCtor() {
  ::memset(&xaxis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&xaxis_)) + sizeof(rotation_));
}

Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:android.emulation.control.Rotation)
  SharedDtor();
}

void Rotation::SharedDtor() {
}

void Rotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rotation& Rotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rotation_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.Rotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xaxis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&xaxis_)) + sizeof(rotation_));
  _internal_metadata_.Clear();
}

const char* Rotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.Rotation.SkinRotation rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_rotation(static_cast<::android::emulation::control::Rotation_SkinRotation>(val));
        } else goto handle_unusual;
        continue;
      // double xAxis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          xaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yAxis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          yaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double zAxis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          zaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.Rotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.Rotation.SkinRotation rotation = 1;
  if (this->rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rotation(), target);
  }

  // double xAxis = 2;
  if (!(this->xaxis() <= 0 && this->xaxis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_xaxis(), target);
  }

  // double yAxis = 3;
  if (!(this->yaxis() <= 0 && this->yaxis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_yaxis(), target);
  }

  // double zAxis = 4;
  if (!(this->zaxis() <= 0 && this->zaxis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_zaxis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.Rotation)
  return target;
}

size_t Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.Rotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double xAxis = 2;
  if (!(this->xaxis() <= 0 && this->xaxis() >= 0)) {
    total_size += 1 + 8;
  }

  // double yAxis = 3;
  if (!(this->yaxis() <= 0 && this->yaxis() >= 0)) {
    total_size += 1 + 8;
  }

  // double zAxis = 4;
  if (!(this->zaxis() <= 0 && this->zaxis() >= 0)) {
    total_size += 1 + 8;
  }

  // .android.emulation.control.Rotation.SkinRotation rotation = 1;
  if (this->rotation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rotation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.Rotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Rotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.Rotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.Rotation)
    MergeFrom(*source);
  }
}

void Rotation::MergeFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.Rotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.xaxis() <= 0 && from.xaxis() >= 0)) {
    _internal_set_xaxis(from._internal_xaxis());
  }
  if (!(from.yaxis() <= 0 && from.yaxis() >= 0)) {
    _internal_set_yaxis(from._internal_yaxis());
  }
  if (!(from.zaxis() <= 0 && from.zaxis() >= 0)) {
    _internal_set_zaxis(from._internal_zaxis());
  }
  if (from.rotation() != 0) {
    _internal_set_rotation(from._internal_rotation());
  }
}

void Rotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rotation::CopyFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotation::IsInitialized() const {
  return true;
}

void Rotation::InternalSwap(Rotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(xaxis_, other->xaxis_);
  swap(yaxis_, other->yaxis_);
  swap(zaxis_, other->zaxis_);
  swap(rotation_, other->rotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhoneCall::InitAsDefaultInstance() {
}
class PhoneCall::_Internal {
 public:
};

PhoneCall::PhoneCall()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.PhoneCall)
}
PhoneCall::PhoneCall(const PhoneCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_number().empty()) {
    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.PhoneCall)
}

void PhoneCall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhoneCall_emulator_5fcontroller_2eproto.base);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_ = 0;
}

PhoneCall::~PhoneCall() {
  // @@protoc_insertion_point(destructor:android.emulation.control.PhoneCall)
  SharedDtor();
}

void PhoneCall::SharedDtor() {
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PhoneCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhoneCall& PhoneCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhoneCall_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void PhoneCall::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.PhoneCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_ = 0;
  _internal_metadata_.Clear();
}

const char* PhoneCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.PhoneCall.Operation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::android::emulation::control::PhoneCall_Operation>(val));
        } else goto handle_unusual;
        continue;
      // string number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.PhoneCall.number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhoneCall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.PhoneCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.PhoneCall.Operation operation = 1;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // string number = 2;
  if (this->number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.PhoneCall.number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.PhoneCall)
  return target;
}

size_t PhoneCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.PhoneCall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string number = 2;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // .android.emulation.control.PhoneCall.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhoneCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.PhoneCall)
  GOOGLE_DCHECK_NE(&from, this);
  const PhoneCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhoneCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.PhoneCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.PhoneCall)
    MergeFrom(*source);
  }
}

void PhoneCall::MergeFrom(const PhoneCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.PhoneCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void PhoneCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.PhoneCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneCall::CopyFrom(const PhoneCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.PhoneCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneCall::IsInitialized() const {
  return true;
}

void PhoneCall::InternalSwap(PhoneCall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  number_.Swap(&other->number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhoneResponse::InitAsDefaultInstance() {
}
class PhoneResponse::_Internal {
 public:
};

PhoneResponse::PhoneResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.PhoneResponse)
}
PhoneResponse::PhoneResponse(const PhoneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.PhoneResponse)
}

void PhoneResponse::SharedCtor() {
  response_ = 0;
}

PhoneResponse::~PhoneResponse() {
  // @@protoc_insertion_point(destructor:android.emulation.control.PhoneResponse)
  SharedDtor();
}

void PhoneResponse::SharedDtor() {
}

void PhoneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhoneResponse& PhoneResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhoneResponse_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void PhoneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.PhoneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0;
  _internal_metadata_.Clear();
}

const char* PhoneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.PhoneResponse.Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::android::emulation::control::PhoneResponse_Response>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhoneResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.PhoneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.PhoneResponse.Response response = 1;
  if (this->response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.PhoneResponse)
  return target;
}

size_t PhoneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.PhoneResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .android.emulation.control.PhoneResponse.Response response = 1;
  if (this->response() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhoneResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.PhoneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PhoneResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhoneResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.PhoneResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.PhoneResponse)
    MergeFrom(*source);
  }
}

void PhoneResponse::MergeFrom(const PhoneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.PhoneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response() != 0) {
    _internal_set_response(from._internal_response());
  }
}

void PhoneResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.PhoneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneResponse::CopyFrom(const PhoneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.PhoneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneResponse::IsInitialized() const {
  return true;
}

void PhoneResponse::InternalSwap(PhoneResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
}
class Entry::_Internal {
 public:
};

Entry::Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_emulator_5fcontroller_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:android.emulation.control.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.Entry.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.Entry.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.Entry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.Entry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntryList::InitAsDefaultInstance() {
}
class EntryList::_Internal {
 public:
};

EntryList::EntryList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.EntryList)
}
EntryList::EntryList(const EntryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.EntryList)
}

void EntryList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntryList_emulator_5fcontroller_2eproto.base);
}

EntryList::~EntryList() {
  // @@protoc_insertion_point(destructor:android.emulation.control.EntryList)
  SharedDtor();
}

void EntryList::SharedDtor() {
}

void EntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntryList& EntryList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntryList_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void EntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.EntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  _internal_metadata_.Clear();
}

const char* EntryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.emulation.control.Entry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntryList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.EntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.emulation.control.Entry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.EntryList)
  return target;
}

size_t EntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.EntryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.emulation.control.Entry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.EntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const EntryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.EntryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.EntryList)
    MergeFrom(*source);
  }
}

void EntryList::MergeFrom(const EntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.EntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
}

void EntryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.EntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryList::CopyFrom(const EntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.EntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryList::IsInitialized() const {
  return true;
}

void EntryList::InternalSwap(EntryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntryList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmulatorStatus::InitAsDefaultInstance() {
  ::android::emulation::control::_EmulatorStatus_default_instance_._instance.get_mutable()->vmconfig_ = const_cast< ::android::emulation::control::VmConfiguration*>(
      ::android::emulation::control::VmConfiguration::internal_default_instance());
  ::android::emulation::control::_EmulatorStatus_default_instance_._instance.get_mutable()->hardwareconfig_ = const_cast< ::android::emulation::control::EntryList*>(
      ::android::emulation::control::EntryList::internal_default_instance());
}
class EmulatorStatus::_Internal {
 public:
  static const ::android::emulation::control::VmConfiguration& vmconfig(const EmulatorStatus* msg);
  static const ::android::emulation::control::EntryList& hardwareconfig(const EmulatorStatus* msg);
};

const ::android::emulation::control::VmConfiguration&
EmulatorStatus::_Internal::vmconfig(const EmulatorStatus* msg) {
  return *msg->vmconfig_;
}
const ::android::emulation::control::EntryList&
EmulatorStatus::_Internal::hardwareconfig(const EmulatorStatus* msg) {
  return *msg->hardwareconfig_;
}
EmulatorStatus::EmulatorStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.EmulatorStatus)
}
EmulatorStatus::EmulatorStatus(const EmulatorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from._internal_has_vmconfig()) {
    vmconfig_ = new ::android::emulation::control::VmConfiguration(*from.vmconfig_);
  } else {
    vmconfig_ = nullptr;
  }
  if (from._internal_has_hardwareconfig()) {
    hardwareconfig_ = new ::android::emulation::control::EntryList(*from.hardwareconfig_);
  } else {
    hardwareconfig_ = nullptr;
  }
  ::memcpy(&uptime_, &from.uptime_,
    static_cast<size_t>(reinterpret_cast<char*>(&booted_) -
    reinterpret_cast<char*>(&uptime_)) + sizeof(booted_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.EmulatorStatus)
}

void EmulatorStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EmulatorStatus_emulator_5fcontroller_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&vmconfig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&booted_) -
      reinterpret_cast<char*>(&vmconfig_)) + sizeof(booted_));
}

EmulatorStatus::~EmulatorStatus() {
  // @@protoc_insertion_point(destructor:android.emulation.control.EmulatorStatus)
  SharedDtor();
}

void EmulatorStatus::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vmconfig_;
  if (this != internal_default_instance()) delete hardwareconfig_;
}

void EmulatorStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmulatorStatus& EmulatorStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmulatorStatus_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void EmulatorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.EmulatorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && vmconfig_ != nullptr) {
    delete vmconfig_;
  }
  vmconfig_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hardwareconfig_ != nullptr) {
    delete hardwareconfig_;
  }
  hardwareconfig_ = nullptr;
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&booted_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(booted_));
  _internal_metadata_.Clear();
}

const char* EmulatorStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.EmulatorStatus.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uptime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool booted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          booted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.VmConfiguration vmConfig = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vmconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.EntryList hardwareConfig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardwareconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmulatorStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.EmulatorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.EmulatorStatus.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // uint64 uptime = 2;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uptime(), target);
  }

  // bool booted = 3;
  if (this->booted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_booted(), target);
  }

  // .android.emulation.control.VmConfiguration vmConfig = 4;
  if (this->has_vmconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vmconfig(this), target, stream);
  }

  // .android.emulation.control.EntryList hardwareConfig = 5;
  if (this->has_hardwareconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hardwareconfig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.EmulatorStatus)
  return target;
}

size_t EmulatorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.EmulatorStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .android.emulation.control.VmConfiguration vmConfig = 4;
  if (this->has_vmconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vmconfig_);
  }

  // .android.emulation.control.EntryList hardwareConfig = 5;
  if (this->has_hardwareconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hardwareconfig_);
  }

  // uint64 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uptime());
  }

  // bool booted = 3;
  if (this->booted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmulatorStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.EmulatorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const EmulatorStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmulatorStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.EmulatorStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.EmulatorStatus)
    MergeFrom(*source);
  }
}

void EmulatorStatus::MergeFrom(const EmulatorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.EmulatorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_vmconfig()) {
    _internal_mutable_vmconfig()->::android::emulation::control::VmConfiguration::MergeFrom(from._internal_vmconfig());
  }
  if (from.has_hardwareconfig()) {
    _internal_mutable_hardwareconfig()->::android::emulation::control::EntryList::MergeFrom(from._internal_hardwareconfig());
  }
  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
  if (from.booted() != 0) {
    _internal_set_booted(from._internal_booted());
  }
}

void EmulatorStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.EmulatorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmulatorStatus::CopyFrom(const EmulatorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.EmulatorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmulatorStatus::IsInitialized() const {
  return true;
}

void EmulatorStatus::InternalSwap(EmulatorStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vmconfig_, other->vmconfig_);
  swap(hardwareconfig_, other->hardwareconfig_);
  swap(uptime_, other->uptime_);
  swap(booted_, other->booted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmulatorStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioFormat::InitAsDefaultInstance() {
}
class AudioFormat::_Internal {
 public:
};

AudioFormat::AudioFormat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.AudioFormat)
}
AudioFormat::AudioFormat(const AudioFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&samplingrate_, &from.samplingrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&samplingrate_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.AudioFormat)
}

void AudioFormat::SharedCtor() {
  ::memset(&samplingrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&samplingrate_)) + sizeof(format_));
}

AudioFormat::~AudioFormat() {
  // @@protoc_insertion_point(destructor:android.emulation.control.AudioFormat)
  SharedDtor();
}

void AudioFormat::SharedDtor() {
}

void AudioFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFormat& AudioFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioFormat_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void AudioFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.AudioFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&samplingrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&samplingrate_)) + sizeof(format_));
  _internal_metadata_.Clear();
}

const char* AudioFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 samplingRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          samplingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.AudioFormat.Channels channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_channels(static_cast<::android::emulation::control::AudioFormat_Channels>(val));
        } else goto handle_unusual;
        continue;
      // .android.emulation.control.AudioFormat.SampleFormat format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::android::emulation::control::AudioFormat_SampleFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.AudioFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 samplingRate = 1;
  if (this->samplingrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_samplingrate(), target);
  }

  // .android.emulation.control.AudioFormat.Channels channels = 2;
  if (this->channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channels(), target);
  }

  // .android.emulation.control.AudioFormat.SampleFormat format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.AudioFormat)
  return target;
}

size_t AudioFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.AudioFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 samplingRate = 1;
  if (this->samplingrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_samplingrate());
  }

  // .android.emulation.control.AudioFormat.Channels channels = 2;
  if (this->channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channels());
  }

  // .android.emulation.control.AudioFormat.SampleFormat format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.AudioFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.AudioFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.AudioFormat)
    MergeFrom(*source);
  }
}

void AudioFormat::MergeFrom(const AudioFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.AudioFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.samplingrate() != 0) {
    _internal_set_samplingrate(from._internal_samplingrate());
  }
  if (from.channels() != 0) {
    _internal_set_channels(from._internal_channels());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void AudioFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.AudioFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFormat::CopyFrom(const AudioFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.AudioFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFormat::IsInitialized() const {
  return true;
}

void AudioFormat::InternalSwap(AudioFormat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(samplingrate_, other->samplingrate_);
  swap(channels_, other->channels_);
  swap(format_, other->format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioPacket::InitAsDefaultInstance() {
  ::android::emulation::control::_AudioPacket_default_instance_._instance.get_mutable()->format_ = const_cast< ::android::emulation::control::AudioFormat*>(
      ::android::emulation::control::AudioFormat::internal_default_instance());
}
class AudioPacket::_Internal {
 public:
  static const ::android::emulation::control::AudioFormat& format(const AudioPacket* msg);
};

const ::android::emulation::control::AudioFormat&
AudioPacket::_Internal::format(const AudioPacket* msg) {
  return *msg->format_;
}
AudioPacket::AudioPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.AudioPacket)
}
AudioPacket::AudioPacket(const AudioPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio().empty()) {
    audio_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  if (from._internal_has_format()) {
    format_ = new ::android::emulation::control::AudioFormat(*from.format_);
  } else {
    format_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.AudioPacket)
}

void AudioPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioPacket_emulator_5fcontroller_2eproto.base);
  audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&format_)) + sizeof(timestamp_));
}

AudioPacket::~AudioPacket() {
  // @@protoc_insertion_point(destructor:android.emulation.control.AudioPacket)
  SharedDtor();
}

void AudioPacket::SharedDtor() {
  audio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete format_;
}

void AudioPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioPacket& AudioPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioPacket_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void AudioPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.AudioPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && format_ != nullptr) {
    delete format_;
  }
  format_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* AudioPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.emulation.control.AudioFormat format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.AudioPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.emulation.control.AudioFormat format = 1;
  if (this->has_format()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::format(this), target, stream);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // bytes audio = 3;
  if (this->audio().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_audio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.AudioPacket)
  return target;
}

size_t AudioPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.AudioPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audio = 3;
  if (this->audio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio());
  }

  // .android.emulation.control.AudioFormat format = 1;
  if (this->has_format()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.AudioPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.AudioPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.AudioPacket)
    MergeFrom(*source);
  }
}

void AudioPacket::MergeFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.AudioPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio().size() > 0) {

    audio_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_);
  }
  if (from.has_format()) {
    _internal_mutable_format()->::android::emulation::control::AudioFormat::MergeFrom(from._internal_format());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void AudioPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.AudioPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioPacket::CopyFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.AudioPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPacket::IsInitialized() const {
  return true;
}

void AudioPacket::InternalSwap(AudioPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audio_.Swap(&other->audio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(format_, other->format_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmsMessage::InitAsDefaultInstance() {
}
class SmsMessage::_Internal {
 public:
};

SmsMessage::SmsMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.emulation.control.SmsMessage)
}
SmsMessage::SmsMessage(const SmsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  srcaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcaddress().empty()) {
    srcaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.srcaddress_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:android.emulation.control.SmsMessage)
}

void SmsMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmsMessage_emulator_5fcontroller_2eproto.base);
  srcaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SmsMessage::~SmsMessage() {
  // @@protoc_insertion_point(destructor:android.emulation.control.SmsMessage)
  SharedDtor();
}

void SmsMessage::SharedDtor() {
  srcaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SmsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmsMessage& SmsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmsMessage_emulator_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void SmsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:android.emulation.control.SmsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SmsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string srcAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_srcaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.SmsMessage.srcAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "android.emulation.control.SmsMessage.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.emulation.control.SmsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string srcAddress = 1;
  if (this->srcaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcaddress().data(), static_cast<int>(this->_internal_srcaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.SmsMessage.srcAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcaddress(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.emulation.control.SmsMessage.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.emulation.control.SmsMessage)
  return target;
}

size_t SmsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.emulation.control.SmsMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string srcAddress = 1;
  if (this->srcaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcaddress());
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmsMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.emulation.control.SmsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SmsMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmsMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.emulation.control.SmsMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.emulation.control.SmsMessage)
    MergeFrom(*source);
  }
}

void SmsMessage::MergeFrom(const SmsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.emulation.control.SmsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcaddress().size() > 0) {

    srcaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.srcaddress_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void SmsMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.emulation.control.SmsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmsMessage::CopyFrom(const SmsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.emulation.control.SmsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsMessage::IsInitialized() const {
  return true;
}

void SmsMessage::InternalSwap(SmsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  srcaddress_.Swap(&other->srcaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SmsMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace emulation
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::emulation::control::VmRunState* Arena::CreateMaybeMessage< ::android::emulation::control::VmRunState >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::VmRunState >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::ParameterValue* Arena::CreateMaybeMessage< ::android::emulation::control::ParameterValue >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::ParameterValue >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::PhysicalModelValue* Arena::CreateMaybeMessage< ::android::emulation::control::PhysicalModelValue >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::PhysicalModelValue >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::SensorValue* Arena::CreateMaybeMessage< ::android::emulation::control::SensorValue >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::SensorValue >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::LogMessage* Arena::CreateMaybeMessage< ::android::emulation::control::LogMessage >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::LogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::LogcatEntry* Arena::CreateMaybeMessage< ::android::emulation::control::LogcatEntry >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::LogcatEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::VmConfiguration* Arena::CreateMaybeMessage< ::android::emulation::control::VmConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::VmConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::ClipData* Arena::CreateMaybeMessage< ::android::emulation::control::ClipData >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::ClipData >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::Touch* Arena::CreateMaybeMessage< ::android::emulation::control::Touch >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::Touch >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::TouchEvent* Arena::CreateMaybeMessage< ::android::emulation::control::TouchEvent >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::TouchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::MouseEvent* Arena::CreateMaybeMessage< ::android::emulation::control::MouseEvent >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::MouseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::KeyboardEvent* Arena::CreateMaybeMessage< ::android::emulation::control::KeyboardEvent >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::KeyboardEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::Fingerprint* Arena::CreateMaybeMessage< ::android::emulation::control::Fingerprint >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::Fingerprint >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::GpsState* Arena::CreateMaybeMessage< ::android::emulation::control::GpsState >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::GpsState >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::BatteryState* Arena::CreateMaybeMessage< ::android::emulation::control::BatteryState >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::BatteryState >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::ImageTransport* Arena::CreateMaybeMessage< ::android::emulation::control::ImageTransport >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::ImageTransport >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::ImageFormat* Arena::CreateMaybeMessage< ::android::emulation::control::ImageFormat >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::ImageFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::Image* Arena::CreateMaybeMessage< ::android::emulation::control::Image >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::Rotation* Arena::CreateMaybeMessage< ::android::emulation::control::Rotation >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::Rotation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::PhoneCall* Arena::CreateMaybeMessage< ::android::emulation::control::PhoneCall >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::PhoneCall >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::PhoneResponse* Arena::CreateMaybeMessage< ::android::emulation::control::PhoneResponse >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::PhoneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::Entry* Arena::CreateMaybeMessage< ::android::emulation::control::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::EntryList* Arena::CreateMaybeMessage< ::android::emulation::control::EntryList >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::EntryList >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::EmulatorStatus* Arena::CreateMaybeMessage< ::android::emulation::control::EmulatorStatus >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::EmulatorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::AudioFormat* Arena::CreateMaybeMessage< ::android::emulation::control::AudioFormat >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::AudioFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::AudioPacket* Arena::CreateMaybeMessage< ::android::emulation::control::AudioPacket >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::AudioPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::android::emulation::control::SmsMessage* Arena::CreateMaybeMessage< ::android::emulation::control::SmsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::android::emulation::control::SmsMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
