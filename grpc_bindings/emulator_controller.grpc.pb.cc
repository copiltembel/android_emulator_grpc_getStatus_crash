// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: emulator_controller.proto

#include "emulator_controller.pb.h"
#include "emulator_controller.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace android {
namespace emulation {
namespace control {

static const char* EmulatorController_method_names[] = {
  "/android.emulation.control.EmulatorController/streamSensor",
  "/android.emulation.control.EmulatorController/getSensor",
  "/android.emulation.control.EmulatorController/setSensor",
  "/android.emulation.control.EmulatorController/setPhysicalModel",
  "/android.emulation.control.EmulatorController/getPhysicalModel",
  "/android.emulation.control.EmulatorController/streamPhysicalModel",
  "/android.emulation.control.EmulatorController/setClipboard",
  "/android.emulation.control.EmulatorController/getClipboard",
  "/android.emulation.control.EmulatorController/streamClipboard",
  "/android.emulation.control.EmulatorController/setBattery",
  "/android.emulation.control.EmulatorController/getBattery",
  "/android.emulation.control.EmulatorController/setGps",
  "/android.emulation.control.EmulatorController/getGps",
  "/android.emulation.control.EmulatorController/sendFingerprint",
  "/android.emulation.control.EmulatorController/sendKey",
  "/android.emulation.control.EmulatorController/sendTouch",
  "/android.emulation.control.EmulatorController/sendMouse",
  "/android.emulation.control.EmulatorController/sendPhone",
  "/android.emulation.control.EmulatorController/sendSms",
  "/android.emulation.control.EmulatorController/getStatus",
  "/android.emulation.control.EmulatorController/getScreenshot",
  "/android.emulation.control.EmulatorController/streamScreenshot",
  "/android.emulation.control.EmulatorController/streamAudio",
  "/android.emulation.control.EmulatorController/getLogcat",
  "/android.emulation.control.EmulatorController/streamLogcat",
  "/android.emulation.control.EmulatorController/setVmState",
  "/android.emulation.control.EmulatorController/getVmState",
};

std::unique_ptr< EmulatorController::Stub> EmulatorController::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmulatorController::Stub> stub(new EmulatorController::Stub(channel));
  return stub;
}

EmulatorController::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_streamSensor_(EmulatorController_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_getSensor_(EmulatorController_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setSensor_(EmulatorController_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setPhysicalModel_(EmulatorController_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPhysicalModel_(EmulatorController_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_streamPhysicalModel_(EmulatorController_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_setClipboard_(EmulatorController_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getClipboard_(EmulatorController_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_streamClipboard_(EmulatorController_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_setBattery_(EmulatorController_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getBattery_(EmulatorController_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setGps_(EmulatorController_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGps_(EmulatorController_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendFingerprint_(EmulatorController_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendKey_(EmulatorController_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendTouch_(EmulatorController_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendMouse_(EmulatorController_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendPhone_(EmulatorController_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendSms_(EmulatorController_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStatus_(EmulatorController_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getScreenshot_(EmulatorController_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_streamScreenshot_(EmulatorController_method_names[21], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_streamAudio_(EmulatorController_method_names[22], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_getLogcat_(EmulatorController_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_streamLogcat_(EmulatorController_method_names[24], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_setVmState_(EmulatorController_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVmState_(EmulatorController_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::android::emulation::control::SensorValue>* EmulatorController::Stub::streamSensorRaw(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::android::emulation::control::SensorValue>::Create(channel_.get(), rpcmethod_streamSensor_, context, request);
}

void EmulatorController::Stub::experimental_async::streamSensor(::grpc::ClientContext* context, ::android::emulation::control::SensorValue* request, ::grpc::experimental::ClientReadReactor< ::android::emulation::control::SensorValue>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::android::emulation::control::SensorValue>::Create(stub_->channel_.get(), stub_->rpcmethod_streamSensor_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::android::emulation::control::SensorValue>* EmulatorController::Stub::AsyncstreamSensorRaw(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::SensorValue>::Create(channel_.get(), cq, rpcmethod_streamSensor_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::android::emulation::control::SensorValue>* EmulatorController::Stub::PrepareAsyncstreamSensorRaw(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::SensorValue>::Create(channel_.get(), cq, rpcmethod_streamSensor_, context, request, false, nullptr);
}

::grpc::Status EmulatorController::Stub::getSensor(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request, ::android::emulation::control::SensorValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getSensor_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getSensor(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue* request, ::android::emulation::control::SensorValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getSensor_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::SensorValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getSensor_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getSensor(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue* request, ::android::emulation::control::SensorValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getSensor_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::SensorValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getSensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::SensorValue>* EmulatorController::Stub::AsyncgetSensorRaw(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::SensorValue>::Create(channel_.get(), cq, rpcmethod_getSensor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::SensorValue>* EmulatorController::Stub::PrepareAsyncgetSensorRaw(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::SensorValue>::Create(channel_.get(), cq, rpcmethod_getSensor_, context, request, false);
}

::grpc::Status EmulatorController::Stub::setSensor(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setSensor_, context, request, response);
}

void EmulatorController::Stub::experimental_async::setSensor(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setSensor_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setSensor_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setSensor(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setSensor_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::setSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setSensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsetSensorRaw(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setSensor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsetSensorRaw(::grpc::ClientContext* context, const ::android::emulation::control::SensorValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setSensor_, context, request, false);
}

::grpc::Status EmulatorController::Stub::setPhysicalModel(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setPhysicalModel_, context, request, response);
}

void EmulatorController::Stub::experimental_async::setPhysicalModel(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setPhysicalModel_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setPhysicalModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setPhysicalModel_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setPhysicalModel(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setPhysicalModel_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::setPhysicalModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setPhysicalModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsetPhysicalModelRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setPhysicalModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsetPhysicalModelRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setPhysicalModel_, context, request, false);
}

::grpc::Status EmulatorController::Stub::getPhysicalModel(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request, ::android::emulation::control::PhysicalModelValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getPhysicalModel_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getPhysicalModel(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue* request, ::android::emulation::control::PhysicalModelValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getPhysicalModel_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getPhysicalModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::PhysicalModelValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getPhysicalModel_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getPhysicalModel(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue* request, ::android::emulation::control::PhysicalModelValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getPhysicalModel_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getPhysicalModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::PhysicalModelValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getPhysicalModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::PhysicalModelValue>* EmulatorController::Stub::AsyncgetPhysicalModelRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::PhysicalModelValue>::Create(channel_.get(), cq, rpcmethod_getPhysicalModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::PhysicalModelValue>* EmulatorController::Stub::PrepareAsyncgetPhysicalModelRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::PhysicalModelValue>::Create(channel_.get(), cq, rpcmethod_getPhysicalModel_, context, request, false);
}

::grpc::ClientReader< ::android::emulation::control::PhysicalModelValue>* EmulatorController::Stub::streamPhysicalModelRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::android::emulation::control::PhysicalModelValue>::Create(channel_.get(), rpcmethod_streamPhysicalModel_, context, request);
}

void EmulatorController::Stub::experimental_async::streamPhysicalModel(::grpc::ClientContext* context, ::android::emulation::control::PhysicalModelValue* request, ::grpc::experimental::ClientReadReactor< ::android::emulation::control::PhysicalModelValue>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::android::emulation::control::PhysicalModelValue>::Create(stub_->channel_.get(), stub_->rpcmethod_streamPhysicalModel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::android::emulation::control::PhysicalModelValue>* EmulatorController::Stub::AsyncstreamPhysicalModelRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::PhysicalModelValue>::Create(channel_.get(), cq, rpcmethod_streamPhysicalModel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::android::emulation::control::PhysicalModelValue>* EmulatorController::Stub::PrepareAsyncstreamPhysicalModelRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhysicalModelValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::PhysicalModelValue>::Create(channel_.get(), cq, rpcmethod_streamPhysicalModel_, context, request, false, nullptr);
}

::grpc::Status EmulatorController::Stub::setClipboard(::grpc::ClientContext* context, const ::android::emulation::control::ClipData& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setClipboard_, context, request, response);
}

void EmulatorController::Stub::experimental_async::setClipboard(::grpc::ClientContext* context, const ::android::emulation::control::ClipData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setClipboard_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setClipboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setClipboard_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setClipboard(::grpc::ClientContext* context, const ::android::emulation::control::ClipData* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setClipboard_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::setClipboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setClipboard_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsetClipboardRaw(::grpc::ClientContext* context, const ::android::emulation::control::ClipData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setClipboard_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsetClipboardRaw(::grpc::ClientContext* context, const ::android::emulation::control::ClipData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setClipboard_, context, request, false);
}

::grpc::Status EmulatorController::Stub::getClipboard(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::android::emulation::control::ClipData* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getClipboard_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getClipboard(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::ClipData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getClipboard_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getClipboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::ClipData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getClipboard_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getClipboard(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::ClipData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getClipboard_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getClipboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::ClipData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getClipboard_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::ClipData>* EmulatorController::Stub::AsyncgetClipboardRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::ClipData>::Create(channel_.get(), cq, rpcmethod_getClipboard_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::ClipData>* EmulatorController::Stub::PrepareAsyncgetClipboardRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::ClipData>::Create(channel_.get(), cq, rpcmethod_getClipboard_, context, request, false);
}

::grpc::ClientReader< ::android::emulation::control::ClipData>* EmulatorController::Stub::streamClipboardRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::android::emulation::control::ClipData>::Create(channel_.get(), rpcmethod_streamClipboard_, context, request);
}

void EmulatorController::Stub::experimental_async::streamClipboard(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::android::emulation::control::ClipData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::android::emulation::control::ClipData>::Create(stub_->channel_.get(), stub_->rpcmethod_streamClipboard_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::android::emulation::control::ClipData>* EmulatorController::Stub::AsyncstreamClipboardRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::ClipData>::Create(channel_.get(), cq, rpcmethod_streamClipboard_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::android::emulation::control::ClipData>* EmulatorController::Stub::PrepareAsyncstreamClipboardRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::ClipData>::Create(channel_.get(), cq, rpcmethod_streamClipboard_, context, request, false, nullptr);
}

::grpc::Status EmulatorController::Stub::setBattery(::grpc::ClientContext* context, const ::android::emulation::control::BatteryState& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setBattery_, context, request, response);
}

void EmulatorController::Stub::experimental_async::setBattery(::grpc::ClientContext* context, const ::android::emulation::control::BatteryState* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setBattery_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setBattery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setBattery_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setBattery(::grpc::ClientContext* context, const ::android::emulation::control::BatteryState* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setBattery_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::setBattery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setBattery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsetBatteryRaw(::grpc::ClientContext* context, const ::android::emulation::control::BatteryState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setBattery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsetBatteryRaw(::grpc::ClientContext* context, const ::android::emulation::control::BatteryState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setBattery_, context, request, false);
}

::grpc::Status EmulatorController::Stub::getBattery(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::android::emulation::control::BatteryState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getBattery_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getBattery(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::BatteryState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getBattery_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getBattery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::BatteryState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getBattery_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getBattery(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::BatteryState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getBattery_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getBattery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::BatteryState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getBattery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::BatteryState>* EmulatorController::Stub::AsyncgetBatteryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::BatteryState>::Create(channel_.get(), cq, rpcmethod_getBattery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::BatteryState>* EmulatorController::Stub::PrepareAsyncgetBatteryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::BatteryState>::Create(channel_.get(), cq, rpcmethod_getBattery_, context, request, false);
}

::grpc::Status EmulatorController::Stub::setGps(::grpc::ClientContext* context, const ::android::emulation::control::GpsState& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setGps_, context, request, response);
}

void EmulatorController::Stub::experimental_async::setGps(::grpc::ClientContext* context, const ::android::emulation::control::GpsState* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setGps_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setGps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setGps_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setGps(::grpc::ClientContext* context, const ::android::emulation::control::GpsState* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setGps_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::setGps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setGps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsetGpsRaw(::grpc::ClientContext* context, const ::android::emulation::control::GpsState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setGps_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsetGpsRaw(::grpc::ClientContext* context, const ::android::emulation::control::GpsState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setGps_, context, request, false);
}

::grpc::Status EmulatorController::Stub::getGps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::android::emulation::control::GpsState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGps_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getGps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::GpsState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getGps_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getGps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::GpsState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getGps_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getGps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::GpsState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getGps_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getGps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::GpsState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getGps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::GpsState>* EmulatorController::Stub::AsyncgetGpsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::GpsState>::Create(channel_.get(), cq, rpcmethod_getGps_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::GpsState>* EmulatorController::Stub::PrepareAsyncgetGpsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::GpsState>::Create(channel_.get(), cq, rpcmethod_getGps_, context, request, false);
}

::grpc::Status EmulatorController::Stub::sendFingerprint(::grpc::ClientContext* context, const ::android::emulation::control::Fingerprint& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendFingerprint_, context, request, response);
}

void EmulatorController::Stub::experimental_async::sendFingerprint(::grpc::ClientContext* context, const ::android::emulation::control::Fingerprint* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendFingerprint_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendFingerprint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendFingerprint_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendFingerprint(::grpc::ClientContext* context, const ::android::emulation::control::Fingerprint* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendFingerprint_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::sendFingerprint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendFingerprint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsendFingerprintRaw(::grpc::ClientContext* context, const ::android::emulation::control::Fingerprint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_sendFingerprint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsendFingerprintRaw(::grpc::ClientContext* context, const ::android::emulation::control::Fingerprint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_sendFingerprint_, context, request, false);
}

::grpc::Status EmulatorController::Stub::sendKey(::grpc::ClientContext* context, const ::android::emulation::control::KeyboardEvent& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendKey_, context, request, response);
}

void EmulatorController::Stub::experimental_async::sendKey(::grpc::ClientContext* context, const ::android::emulation::control::KeyboardEvent* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendKey_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendKey_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendKey(::grpc::ClientContext* context, const ::android::emulation::control::KeyboardEvent* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendKey_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::sendKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsendKeyRaw(::grpc::ClientContext* context, const ::android::emulation::control::KeyboardEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_sendKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsendKeyRaw(::grpc::ClientContext* context, const ::android::emulation::control::KeyboardEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_sendKey_, context, request, false);
}

::grpc::Status EmulatorController::Stub::sendTouch(::grpc::ClientContext* context, const ::android::emulation::control::TouchEvent& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendTouch_, context, request, response);
}

void EmulatorController::Stub::experimental_async::sendTouch(::grpc::ClientContext* context, const ::android::emulation::control::TouchEvent* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendTouch_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendTouch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendTouch_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendTouch(::grpc::ClientContext* context, const ::android::emulation::control::TouchEvent* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendTouch_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::sendTouch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendTouch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsendTouchRaw(::grpc::ClientContext* context, const ::android::emulation::control::TouchEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_sendTouch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsendTouchRaw(::grpc::ClientContext* context, const ::android::emulation::control::TouchEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_sendTouch_, context, request, false);
}

::grpc::Status EmulatorController::Stub::sendMouse(::grpc::ClientContext* context, const ::android::emulation::control::MouseEvent& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendMouse_, context, request, response);
}

void EmulatorController::Stub::experimental_async::sendMouse(::grpc::ClientContext* context, const ::android::emulation::control::MouseEvent* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendMouse_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendMouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendMouse_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendMouse(::grpc::ClientContext* context, const ::android::emulation::control::MouseEvent* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendMouse_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::sendMouse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendMouse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsendMouseRaw(::grpc::ClientContext* context, const ::android::emulation::control::MouseEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_sendMouse_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsendMouseRaw(::grpc::ClientContext* context, const ::android::emulation::control::MouseEvent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_sendMouse_, context, request, false);
}

::grpc::Status EmulatorController::Stub::sendPhone(::grpc::ClientContext* context, const ::android::emulation::control::PhoneCall& request, ::android::emulation::control::PhoneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendPhone_, context, request, response);
}

void EmulatorController::Stub::experimental_async::sendPhone(::grpc::ClientContext* context, const ::android::emulation::control::PhoneCall* request, ::android::emulation::control::PhoneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendPhone_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendPhone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::PhoneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendPhone_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendPhone(::grpc::ClientContext* context, const ::android::emulation::control::PhoneCall* request, ::android::emulation::control::PhoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendPhone_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::sendPhone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::PhoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendPhone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::PhoneResponse>* EmulatorController::Stub::AsyncsendPhoneRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhoneCall& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::PhoneResponse>::Create(channel_.get(), cq, rpcmethod_sendPhone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::PhoneResponse>* EmulatorController::Stub::PrepareAsyncsendPhoneRaw(::grpc::ClientContext* context, const ::android::emulation::control::PhoneCall& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::PhoneResponse>::Create(channel_.get(), cq, rpcmethod_sendPhone_, context, request, false);
}

::grpc::Status EmulatorController::Stub::sendSms(::grpc::ClientContext* context, const ::android::emulation::control::SmsMessage& request, ::android::emulation::control::PhoneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendSms_, context, request, response);
}

void EmulatorController::Stub::experimental_async::sendSms(::grpc::ClientContext* context, const ::android::emulation::control::SmsMessage* request, ::android::emulation::control::PhoneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendSms_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendSms(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::PhoneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_sendSms_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::sendSms(::grpc::ClientContext* context, const ::android::emulation::control::SmsMessage* request, ::android::emulation::control::PhoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendSms_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::sendSms(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::PhoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_sendSms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::PhoneResponse>* EmulatorController::Stub::AsyncsendSmsRaw(::grpc::ClientContext* context, const ::android::emulation::control::SmsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::PhoneResponse>::Create(channel_.get(), cq, rpcmethod_sendSms_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::PhoneResponse>* EmulatorController::Stub::PrepareAsyncsendSmsRaw(::grpc::ClientContext* context, const ::android::emulation::control::SmsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::PhoneResponse>::Create(channel_.get(), cq, rpcmethod_sendSms_, context, request, false);
}

::grpc::Status EmulatorController::Stub::getStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::android::emulation::control::EmulatorStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getStatus_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::EmulatorStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::EmulatorStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::EmulatorStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::EmulatorStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::EmulatorStatus>* EmulatorController::Stub::AsyncgetStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::EmulatorStatus>::Create(channel_.get(), cq, rpcmethod_getStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::EmulatorStatus>* EmulatorController::Stub::PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::EmulatorStatus>::Create(channel_.get(), cq, rpcmethod_getStatus_, context, request, false);
}

::grpc::Status EmulatorController::Stub::getScreenshot(::grpc::ClientContext* context, const ::android::emulation::control::ImageFormat& request, ::android::emulation::control::Image* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getScreenshot_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getScreenshot(::grpc::ClientContext* context, const ::android::emulation::control::ImageFormat* request, ::android::emulation::control::Image* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getScreenshot_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getScreenshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::Image* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getScreenshot_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getScreenshot(::grpc::ClientContext* context, const ::android::emulation::control::ImageFormat* request, ::android::emulation::control::Image* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getScreenshot_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getScreenshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::Image* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getScreenshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::Image>* EmulatorController::Stub::AsyncgetScreenshotRaw(::grpc::ClientContext* context, const ::android::emulation::control::ImageFormat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::Image>::Create(channel_.get(), cq, rpcmethod_getScreenshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::Image>* EmulatorController::Stub::PrepareAsyncgetScreenshotRaw(::grpc::ClientContext* context, const ::android::emulation::control::ImageFormat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::Image>::Create(channel_.get(), cq, rpcmethod_getScreenshot_, context, request, false);
}

::grpc::ClientReader< ::android::emulation::control::Image>* EmulatorController::Stub::streamScreenshotRaw(::grpc::ClientContext* context, const ::android::emulation::control::ImageFormat& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::android::emulation::control::Image>::Create(channel_.get(), rpcmethod_streamScreenshot_, context, request);
}

void EmulatorController::Stub::experimental_async::streamScreenshot(::grpc::ClientContext* context, ::android::emulation::control::ImageFormat* request, ::grpc::experimental::ClientReadReactor< ::android::emulation::control::Image>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::android::emulation::control::Image>::Create(stub_->channel_.get(), stub_->rpcmethod_streamScreenshot_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::android::emulation::control::Image>* EmulatorController::Stub::AsyncstreamScreenshotRaw(::grpc::ClientContext* context, const ::android::emulation::control::ImageFormat& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::Image>::Create(channel_.get(), cq, rpcmethod_streamScreenshot_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::android::emulation::control::Image>* EmulatorController::Stub::PrepareAsyncstreamScreenshotRaw(::grpc::ClientContext* context, const ::android::emulation::control::ImageFormat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::Image>::Create(channel_.get(), cq, rpcmethod_streamScreenshot_, context, request, false, nullptr);
}

::grpc::ClientReader< ::android::emulation::control::AudioPacket>* EmulatorController::Stub::streamAudioRaw(::grpc::ClientContext* context, const ::android::emulation::control::AudioFormat& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::android::emulation::control::AudioPacket>::Create(channel_.get(), rpcmethod_streamAudio_, context, request);
}

void EmulatorController::Stub::experimental_async::streamAudio(::grpc::ClientContext* context, ::android::emulation::control::AudioFormat* request, ::grpc::experimental::ClientReadReactor< ::android::emulation::control::AudioPacket>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::android::emulation::control::AudioPacket>::Create(stub_->channel_.get(), stub_->rpcmethod_streamAudio_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::android::emulation::control::AudioPacket>* EmulatorController::Stub::AsyncstreamAudioRaw(::grpc::ClientContext* context, const ::android::emulation::control::AudioFormat& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::AudioPacket>::Create(channel_.get(), cq, rpcmethod_streamAudio_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::android::emulation::control::AudioPacket>* EmulatorController::Stub::PrepareAsyncstreamAudioRaw(::grpc::ClientContext* context, const ::android::emulation::control::AudioFormat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::AudioPacket>::Create(channel_.get(), cq, rpcmethod_streamAudio_, context, request, false, nullptr);
}

::grpc::Status EmulatorController::Stub::getLogcat(::grpc::ClientContext* context, const ::android::emulation::control::LogMessage& request, ::android::emulation::control::LogMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getLogcat_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getLogcat(::grpc::ClientContext* context, const ::android::emulation::control::LogMessage* request, ::android::emulation::control::LogMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getLogcat_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getLogcat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::LogMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getLogcat_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getLogcat(::grpc::ClientContext* context, const ::android::emulation::control::LogMessage* request, ::android::emulation::control::LogMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getLogcat_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getLogcat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::LogMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getLogcat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::LogMessage>* EmulatorController::Stub::AsyncgetLogcatRaw(::grpc::ClientContext* context, const ::android::emulation::control::LogMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::LogMessage>::Create(channel_.get(), cq, rpcmethod_getLogcat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::LogMessage>* EmulatorController::Stub::PrepareAsyncgetLogcatRaw(::grpc::ClientContext* context, const ::android::emulation::control::LogMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::LogMessage>::Create(channel_.get(), cq, rpcmethod_getLogcat_, context, request, false);
}

::grpc::ClientReader< ::android::emulation::control::LogMessage>* EmulatorController::Stub::streamLogcatRaw(::grpc::ClientContext* context, const ::android::emulation::control::LogMessage& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::android::emulation::control::LogMessage>::Create(channel_.get(), rpcmethod_streamLogcat_, context, request);
}

void EmulatorController::Stub::experimental_async::streamLogcat(::grpc::ClientContext* context, ::android::emulation::control::LogMessage* request, ::grpc::experimental::ClientReadReactor< ::android::emulation::control::LogMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::android::emulation::control::LogMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_streamLogcat_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::android::emulation::control::LogMessage>* EmulatorController::Stub::AsyncstreamLogcatRaw(::grpc::ClientContext* context, const ::android::emulation::control::LogMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::LogMessage>::Create(channel_.get(), cq, rpcmethod_streamLogcat_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::android::emulation::control::LogMessage>* EmulatorController::Stub::PrepareAsyncstreamLogcatRaw(::grpc::ClientContext* context, const ::android::emulation::control::LogMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::android::emulation::control::LogMessage>::Create(channel_.get(), cq, rpcmethod_streamLogcat_, context, request, false, nullptr);
}

::grpc::Status EmulatorController::Stub::setVmState(::grpc::ClientContext* context, const ::android::emulation::control::VmRunState& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setVmState_, context, request, response);
}

void EmulatorController::Stub::experimental_async::setVmState(::grpc::ClientContext* context, const ::android::emulation::control::VmRunState* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setVmState_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setVmState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setVmState_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::setVmState(::grpc::ClientContext* context, const ::android::emulation::control::VmRunState* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setVmState_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::setVmState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setVmState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::AsyncsetVmStateRaw(::grpc::ClientContext* context, const ::android::emulation::control::VmRunState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setVmState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmulatorController::Stub::PrepareAsyncsetVmStateRaw(::grpc::ClientContext* context, const ::android::emulation::control::VmRunState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_setVmState_, context, request, false);
}

::grpc::Status EmulatorController::Stub::getVmState(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::android::emulation::control::VmRunState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getVmState_, context, request, response);
}

void EmulatorController::Stub::experimental_async::getVmState(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::VmRunState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getVmState_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getVmState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::VmRunState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getVmState_, context, request, response, std::move(f));
}

void EmulatorController::Stub::experimental_async::getVmState(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::VmRunState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getVmState_, context, request, response, reactor);
}

void EmulatorController::Stub::experimental_async::getVmState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::android::emulation::control::VmRunState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getVmState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::VmRunState>* EmulatorController::Stub::AsyncgetVmStateRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::VmRunState>::Create(channel_.get(), cq, rpcmethod_getVmState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::android::emulation::control::VmRunState>* EmulatorController::Stub::PrepareAsyncgetVmStateRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::android::emulation::control::VmRunState>::Create(channel_.get(), cq, rpcmethod_getVmState_, context, request, false);
}

EmulatorController::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmulatorController::Service, ::android::emulation::control::SensorValue, ::android::emulation::control::SensorValue>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::SensorValue* req,
             ::grpc_impl::ServerWriter<::android::emulation::control::SensorValue>* writer) {
               return service->streamSensor(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::SensorValue, ::android::emulation::control::SensorValue>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::SensorValue* req,
             ::android::emulation::control::SensorValue* resp) {
               return service->getSensor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::SensorValue, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::SensorValue* req,
             ::google::protobuf::Empty* resp) {
               return service->setSensor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::PhysicalModelValue, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::PhysicalModelValue* req,
             ::google::protobuf::Empty* resp) {
               return service->setPhysicalModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::PhysicalModelValue, ::android::emulation::control::PhysicalModelValue>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::PhysicalModelValue* req,
             ::android::emulation::control::PhysicalModelValue* resp) {
               return service->getPhysicalModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmulatorController::Service, ::android::emulation::control::PhysicalModelValue, ::android::emulation::control::PhysicalModelValue>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::PhysicalModelValue* req,
             ::grpc_impl::ServerWriter<::android::emulation::control::PhysicalModelValue>* writer) {
               return service->streamPhysicalModel(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::ClipData, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::ClipData* req,
             ::google::protobuf::Empty* resp) {
               return service->setClipboard(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::google::protobuf::Empty, ::android::emulation::control::ClipData>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::android::emulation::control::ClipData* resp) {
               return service->getClipboard(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmulatorController::Service, ::google::protobuf::Empty, ::android::emulation::control::ClipData>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc_impl::ServerWriter<::android::emulation::control::ClipData>* writer) {
               return service->streamClipboard(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::BatteryState, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::BatteryState* req,
             ::google::protobuf::Empty* resp) {
               return service->setBattery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::google::protobuf::Empty, ::android::emulation::control::BatteryState>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::android::emulation::control::BatteryState* resp) {
               return service->getBattery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::GpsState, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::GpsState* req,
             ::google::protobuf::Empty* resp) {
               return service->setGps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::google::protobuf::Empty, ::android::emulation::control::GpsState>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::android::emulation::control::GpsState* resp) {
               return service->getGps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::Fingerprint, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::Fingerprint* req,
             ::google::protobuf::Empty* resp) {
               return service->sendFingerprint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::KeyboardEvent, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::KeyboardEvent* req,
             ::google::protobuf::Empty* resp) {
               return service->sendKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::TouchEvent, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::TouchEvent* req,
             ::google::protobuf::Empty* resp) {
               return service->sendTouch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::MouseEvent, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::MouseEvent* req,
             ::google::protobuf::Empty* resp) {
               return service->sendMouse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::PhoneCall, ::android::emulation::control::PhoneResponse>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::PhoneCall* req,
             ::android::emulation::control::PhoneResponse* resp) {
               return service->sendPhone(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::SmsMessage, ::android::emulation::control::PhoneResponse>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::SmsMessage* req,
             ::android::emulation::control::PhoneResponse* resp) {
               return service->sendSms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::google::protobuf::Empty, ::android::emulation::control::EmulatorStatus>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::android::emulation::control::EmulatorStatus* resp) {
               return service->getStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::ImageFormat, ::android::emulation::control::Image>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::ImageFormat* req,
             ::android::emulation::control::Image* resp) {
               return service->getScreenshot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmulatorController::Service, ::android::emulation::control::ImageFormat, ::android::emulation::control::Image>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::ImageFormat* req,
             ::grpc_impl::ServerWriter<::android::emulation::control::Image>* writer) {
               return service->streamScreenshot(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmulatorController::Service, ::android::emulation::control::AudioFormat, ::android::emulation::control::AudioPacket>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::AudioFormat* req,
             ::grpc_impl::ServerWriter<::android::emulation::control::AudioPacket>* writer) {
               return service->streamAudio(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::LogMessage, ::android::emulation::control::LogMessage>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::LogMessage* req,
             ::android::emulation::control::LogMessage* resp) {
               return service->getLogcat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[24],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmulatorController::Service, ::android::emulation::control::LogMessage, ::android::emulation::control::LogMessage>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::LogMessage* req,
             ::grpc_impl::ServerWriter<::android::emulation::control::LogMessage>* writer) {
               return service->streamLogcat(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::android::emulation::control::VmRunState, ::google::protobuf::Empty>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::android::emulation::control::VmRunState* req,
             ::google::protobuf::Empty* resp) {
               return service->setVmState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmulatorController_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmulatorController::Service, ::google::protobuf::Empty, ::android::emulation::control::VmRunState>(
          [](EmulatorController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::android::emulation::control::VmRunState* resp) {
               return service->getVmState(ctx, req, resp);
             }, this)));
}

EmulatorController::Service::~Service() {
}

::grpc::Status EmulatorController::Service::streamSensor(::grpc::ServerContext* context, const ::android::emulation::control::SensorValue* request, ::grpc::ServerWriter< ::android::emulation::control::SensorValue>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getSensor(::grpc::ServerContext* context, const ::android::emulation::control::SensorValue* request, ::android::emulation::control::SensorValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::setSensor(::grpc::ServerContext* context, const ::android::emulation::control::SensorValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::setPhysicalModel(::grpc::ServerContext* context, const ::android::emulation::control::PhysicalModelValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getPhysicalModel(::grpc::ServerContext* context, const ::android::emulation::control::PhysicalModelValue* request, ::android::emulation::control::PhysicalModelValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::streamPhysicalModel(::grpc::ServerContext* context, const ::android::emulation::control::PhysicalModelValue* request, ::grpc::ServerWriter< ::android::emulation::control::PhysicalModelValue>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::setClipboard(::grpc::ServerContext* context, const ::android::emulation::control::ClipData* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getClipboard(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::ClipData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::streamClipboard(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::android::emulation::control::ClipData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::setBattery(::grpc::ServerContext* context, const ::android::emulation::control::BatteryState* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getBattery(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::BatteryState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::setGps(::grpc::ServerContext* context, const ::android::emulation::control::GpsState* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getGps(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::GpsState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::sendFingerprint(::grpc::ServerContext* context, const ::android::emulation::control::Fingerprint* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::sendKey(::grpc::ServerContext* context, const ::android::emulation::control::KeyboardEvent* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::sendTouch(::grpc::ServerContext* context, const ::android::emulation::control::TouchEvent* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::sendMouse(::grpc::ServerContext* context, const ::android::emulation::control::MouseEvent* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::sendPhone(::grpc::ServerContext* context, const ::android::emulation::control::PhoneCall* request, ::android::emulation::control::PhoneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::sendSms(::grpc::ServerContext* context, const ::android::emulation::control::SmsMessage* request, ::android::emulation::control::PhoneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::EmulatorStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getScreenshot(::grpc::ServerContext* context, const ::android::emulation::control::ImageFormat* request, ::android::emulation::control::Image* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::streamScreenshot(::grpc::ServerContext* context, const ::android::emulation::control::ImageFormat* request, ::grpc::ServerWriter< ::android::emulation::control::Image>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::streamAudio(::grpc::ServerContext* context, const ::android::emulation::control::AudioFormat* request, ::grpc::ServerWriter< ::android::emulation::control::AudioPacket>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getLogcat(::grpc::ServerContext* context, const ::android::emulation::control::LogMessage* request, ::android::emulation::control::LogMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::streamLogcat(::grpc::ServerContext* context, const ::android::emulation::control::LogMessage* request, ::grpc::ServerWriter< ::android::emulation::control::LogMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::setVmState(::grpc::ServerContext* context, const ::android::emulation::control::VmRunState* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmulatorController::Service::getVmState(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::android::emulation::control::VmRunState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace android
}  // namespace emulation
}  // namespace control

